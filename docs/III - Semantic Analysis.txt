Valuta di utilizzare gli intrisics in llvm per velocizzare la scrittura del codice in IR

Per i where bindings:
- Usa una variabile globale per affermare che l'espressione che sto parsando è all'interno del corpo di una funzione
- All'interno dell'espressione della funzione, tieni traccia di tutti gli identificatori utilizzati in una symTable provvisoria
- Per ogni identificatore, inferiscine il tipo e salvalo nella symTable
- Nella scrittura dell'IR dell'espressione, utilizza nomi provvisori per ogni valore incontrato
- Effettua il parsing del where binding regolarmente, come se fosse stato parsato prima dell'espressione (i.e. crea la symTable della funzione e parsa tutto regolarmente)
- Una volta che la funzione è stata completamente parsata, "merge": per ogni identificatore, cercalo nelle symTable (in ordine gerarchico); 
  se l'identificatore non è stato dichiarato -> errore semantico "L'identificatore non è mai stato dichiarato"
  altrimenti -> verifica la coerenza (i.e. il tipo inferito corrisponde a quello dichiarato)
                se supera la verifica, sostituisci l'id nella IR con quello definitivo
- alla fine, unisci il blocco di codice del where binding con quello dell'espressione, in quest'ordine

TODO:
- Symbol Table entries (da arricchire con info utili per la IR)
- Type Hierarchy
- Type Checking
- Value Uniqueness Checking
//- Pattern Uniqueness Checking
- Scoping (Dichiarazioni + Utilizzo di Variabili)

ANALISI SEMANTICA:
- Definisci SymTable (Tipo)
- Creare un albero della Type Hierarchy (OK)
- Uniqueness check (OK)
- Definisci gli attributi di ogni simbolo (OK)
- Scoping
//- Pattern Matching

Symbol Tables:
- Contesto: ogni funzione ha la propria symbol table, anche quelle annidate + una symbol table principale
- Attributi: id, type tree, flag per assegnazione avvenuta, (nome variabile nel codice LLVM (ogni variabile può essere assegnata una sola volta, quindi l'id è univoco)), lista dei pattern utilizzati (solo per funzioni)

//Sul Pattern Matching:
//- Tutti i pattern relativi a una certa funzione devono essere scritti uno dopo l'altro (altrimenti è come dichiarare due funzioni diverse)

Static Scoping:
- Dichiarazione: 
	Una variabile può essere sempre dichiarata, a patto che non sia già stata dichiarata nel blocco corrente
- Accesso:
	Data una variabile da utilizzare (es. in un'expr), ha priorità la variabile dichiarata nel blocco più annidato, partendo da quello corrente in su 

Sulle dichiarazioni:
- Dichiarazioni di tipo: aggiungono un entry nella symtable corrente contenente solo id e tipo, flag per assegnazione avvenuta (= false), // inizializza la lista dei pattern se il tipo è una funzione

Type Widening:
- Se viene castato un elemento salvato nella symTable (un valore), il suo tipo deve essere immutabile e sarà la nuova variabile ottenuta dopo il casting a contenere il tipo aggiornato

Controlli:
- Uniqueness Check:
	Contesto: in una dichiarazione 
	Controllo: verifica se la variabile dichiarata non è stata già dichiarata nel blocco corrente
- Type Check:
	Contesto: in una espressione/ statement imperativo
	Controllo: verifica se il tipo dell'espressione coincide con quello atteso
- Assignment Uniqueness Check
	Controllo: in un'assegnazione (DECL_VALUE)
	Controllo: verifica se la variabile assegnata non è stata già assegnata nel blocco corrente
- Arity Check:
	Contesto: in una dichiarazione di funzione
	Controllo: verifica se la funzione dichiarata ha arità pari al numero delle sue variabili
- Declaration Check:
	Contesto: in una assegnazione / espressione
	Controlo: verifica che la variabile da utilizzare/assegnare sia stata dichiarata

//PATTERN MATCHING:
//Ipotesi da rispettare: 
//- [Sem. Analysis] Il tipo dell'argomento è stato verificato e convalidato prima (OK)
//- [Sem. Analysis] Per ogni funzione, ogni pattern è utilizzato univocamente 
//- [Sem. Analysis] Il tipo del pattern è compatibile con quello richiesto dalla funzione (e.g. [(Int, Int)] non accetta un pattern come ())

----------------------------------------------------------------------------------------------------------------------
--- [SEM.ANALYSIS] INDICAZIONE, PER OGNI COSTRUTTO, DELLE INFO RICHIESTE, LE INFO PRODOTTE E I CHECK DA EFFETTUARE ---
----------------------------------------------------------------------------------------------------------------------
Tutti i check sulle symTable implementano lo Static Scoping

// TODO Implementare IOAction

PROGRAM: push nel symTableStack (all'inizio) e pop dal symTableStack (alla fine)
IMPER_PART: 
IO_ACTION (i): 	tipo di "PRINT";
		tipo di "IO_ACTION" corrispondente a quello di "PRINT";
		Type Checking su "PRINT" (deve essere IOAction);
	  (ii): tipo di "DO_BLOCK";
		tipo di "IO_ACTION" corrispondente a quello di "DO_BLOCK";
		Type Checking su "DO_BLOCK" (deve essere IOAction);
	  (iii):tipo di "IF_BLOCK_IMPER"; 
		tipo di "IO_ACTION" corrispondente a quello di "IF_BLOCK_IMPER"; 
		Type Checking su "IF_BLOCK_IMPER" (deve essere IOAction);
IO_ACTIONS (i, ii):	
		tipo di "IO_ACTION";
		tipo di "IO_ACTIONS" corrispondente a quello di "IO_ACTION" (l'ultima IOAction ha priorità);
		Type Checking su "IO_ACTION" (deve essere IOAction);
	   (iii):
		tipo di "LET_BLOCK_IMPER";
		tipo di "IO_ACTIONS" corrispondente a quello di "LET_BLOCK_IMPER"
		Type Checking su "LET_BLOCK_IMPER" (deve essere IOAction);
PRINT: 	tipo di "ACTARG";
	tipo di "PRINT" corrispondente a "IOAction ACTARG.type";
	Type Checking su "ACTARG" /* (deve appartenere alla Show Typeclass) */
DO_BLOCK:	 tipo di "IO_ACTIONS";
		 tipo di "DO_BLOCK" corrispondente a quello di "IO_ACTIONS";
		 Type Checking su "IO_ACTIONS" (deve essere IOAction);
IF_BLOCK_IMPER:
		 tipo di "COND",
		 tipo di "IO_ACTION_1",
		 tipo di "IO_ACTION_2";
		 tipo di "IF_BLOCK_IMPER" corrispondente al tipo di "IO_ACTION_1";
		 Type Equivalence Checking su "IO_ACTION_1" e "IO_ACTION_2",
		 Type Checking su "COND" (deve essere Bool);
LET_BLOCK_IMPER: 
		 tipo di "IO_ACTION";
		 push symTable (dopo "let") e pop symTable (alla fine);
		 tipo di "LET_BLOCK_IMPER" corrispondente a quello di "IO_ACTION";
		 Type Checking su "IO_ACTION" (deve essere IoAction);
LET_STMTS (i):
	  (ii):
	  (iii):
	  (iv): 
FUNCT_PART (i):
COND (i):	tipo di "EXPR";
		tipo di "COND" corrispondente a quello di "EXPR";
		Type Checking su "EXPR" (deve essere Bool);
DECL (i, ii, iii):
DECL_TYPE (i):  tipo di "DECL_TYPE", stringa di "id";
	        aggiungere "id" alla symTable attuale, con tipo corrispondente a quello di "DECL_TYPE",
		tipo di "DECL_TYPE" corrispondente a quello di "DECL_TYPE";
	        Uniqueness Check su "id"
	  (ii): tipo di "TYPE", stringa di "id"; 
		aggiungere "id" alla symTable attuale, con tipo corrispondente a quello di "TYPE",
		tipo di "DECL_TYPE" corrispondente a quello di "TYPE";
		Uniqueness Check su "id"
DECL_VALUE (i): tipo di "id", stringa di "id",
		tipo di "EXPR"; 
		aggiornare isAssigned relativo alla variabile assegnata, nella symTable; 
		Declaration check su "id", 
		Assignment Uniqueness check su "id", 
		Type Checking su "EXPR" (deve corrispondere a quello di id)
	   (ii):tipo di "id", stringa di "id";
		aggiornare isAssigned relativo alla variabile assegnata, nella symTable; 
		Declaration check su "id", 
		Assignment Uniqueness check su "id", 
		Type Checking su "EXPR" (deve corrispondere a quello di id)
DECL_FUNCT (i): tipo di "id", stringa di "id"; 
		lista di id in "LFORMARG";
		tipo di "EXPR";
  		push symTable (prima del primo argomento), pop symTable (alla fine), 
		aggiornare isAssigned relativo a "id";
		Declaration check su "id",
		Type Checking su "id" (deve essere di tipo Function),
		Arity check su "id" (deve essere pari alla lunghezza di "LFORMARG"),
		Type Checking su "EXPR" (deve corrispondere al tipo di ritorno di "id"),
		Assignment Uniqueness check su "id",
LFORMARG (i): 	stringa di "id",
		tipo di "id" (ereditato da LFORMARG),
		lista di id di "LFORMARG";
		aggiungere "id" alla symTable attuale, con tipo corrispondente al ramo sx del tipo di id
			e isAssigned = true, 
		creare lista di id per "LFORMARG" prendendo quella di "LFORMARG" e aggiungendovi "id";
		Uniqueness Check su "id",
		se l'albero ottenuto da Stack[-1] non è di tipo Funct -> Arity Error
	 (ii): 	stringa di "id",
	       	tipo di "id" (catturato da Stack[-1])
		aggiungere "id" alla symTable attuale, con tipo corrispondente al ramo sx del tipo di id
			e isAssigned = true;
		creare lista di id per "LFORMARG" e aggiungervi "id";
		Uniqueness Check su "id",
		se l'albero ottenuto da Stack[-1] non è di tipo Funct -> Arity Error  
//PATTERN (i): Pattern Tree relativo a "pattern_list"; attribuisci lo stesso Pattern Tree a "PATTERN"
//	(ii): Pattern Tree relativo a "pattern_tuple"; attribuisci lo stesso Pattern Tree a "PATTERN"
//	(iii): Pattern Tree relativo a "value_basic"; attribuisci lo stesso Pattern Tree a "PATTERN"
//	(iv): Pattern Tree relativo a "us"; attribuisci lo stesso Pattern Tree a "PATTERN"
//	(v): Pattern Tree relativo a "id"; attribuisci lo stesso Pattern Tree a "PATTERN"
//PATTERN_LIST (i): crea Pattern Node di tipo List con head corrispondente al Pattern Tree di "PATTERN" e tail corrispondente al Pattern Tree di "LPATTERN_CONS"; 
//		  attribuisci lo stesso Pattern Tree a "PATTERN_LIST"
//	     (ii): attribuisci lo stesso Pattern Tree di "LPATTERN_CM" a "PATTERN_LIST"
//	     (iii): crea Pattern Node del tipo Empty List,
//		    attribuisci lo stesso Pattern Tree a "PATTERN_LIST"
//LPATTERN_CONS (i): crea Pattern Node di tipo List con head corrispondente al Pattern Tree di "PATTERN" e tail corrispondente al Pattern Tree di tipo Empty List,
//		   attribuisci lo stesso Pattern Tree a "LPATTERN_CONS"
//	      (ii): crea Pattern Node di tipo List con head corrispondente al Pattern Tree di "PATTERN" e tail corrispondente al Pattern Tree di "LPATTERN_CONS", 
//		    attribuisci lo stesso Pattern Tree a "LPATTERN_CONS"
//PATTERN_TUPLE (i): crea Pattern Node di tipo Tuple i cui figli sono tutti i pattern in "PATTERN" e "LPATTERN_CM",
//		   attribuisci lo stesso Pattern Tree a "PATTERN_TUPLE"
//	      (ii): crea Pattern Node di tipo Empty Tuple,
//		    attribuisci lo stesso Pattern Tree a "PATTERN_TUPLE"
//LPATTERN_CM (i): crea una lista di Pattern e inseriscici il Pattern Tree corrispondente a "PATTERN",
//		 attribuisci la lista a LPATTERN_CM
//	    (ii): appendi il Pattern Tree corrispondente a "PATTERN" a sx della lista di pattern definita da "LPATTERN_CM",
//		  attribuisci tale lista a "LPATTERN_CM"
EXPR 	(i, ii, iii, iv):
		tipo di "EXPR",
		tipo di "EXPR_NOTUNARYOP";
		tipo di "EXPR" (parent) corrispondente a "EXPR".type;
		Type Checking su "EXPR" e "EXPR_NOTUNARYOP" (devono essere subtype di Double ed equivalenti),
	(v):	tipo di "EXPR",
		tipo di "EXPR_NOTUNARYOP";
		tipo di "EXPR" (parent) corrispondente a Int;
		Type Checking su "EXPR" e "EXPR_NOTUNARYOP" (devono essere subtype di Int)
	(vi):	tipo di "ACTARG"_1,
		tipo di "ACTARG"_2;
		tipo di "EXPR" (parent) corrispondente a Int;
		Type Checking su "ACTARG"_1 e "ACTARG"_2 (devono essere subtype di Int) 
	(vii, viii):
		tipo di "EXPR",
		tipo di "EXPR_NOTUNARYOP";
		tipo di "EXPR" (parent) corrispondente a Bool;
		Type Checking su "EXPR" e "EXPR_NOTUNARYOP" (devono essere subtype di Bool);
	(ix, x, xi, xii, xiii):
		tipo di "EXPR",
		tipo di "EXPR_NOTUNARYOP";
		tipo di "EXPR" (parent) corrispondente a Bool;
		Type Checking su "EXPR" e "EXPR_NOTUNARYOP" (devono essere subtype di Double o di Char e devono essere l'uno subtype dell'altro);
		(IR generation) se "EXPR".type =/= "EXPR_NOTUNARYOP".type, effettuare il casting dell'expr di tipo più specifico
//	(xiv):  tipo di "ACTARG";
		tipo di "EXPR" corrispondente a "ACTARG";
		Type Checking su "ACTARG" (deve essere subtype di List);
	(xv):	tipo di "ACTARG";
		tipo di "EXPR" corrispondente a "ACTARG.child0";
		Type Checking su "ACTARG" (deve essere subtype di List);
	(xvi):	tipo di "EXPR_1", "EXPR_2";
		tipo di "EXPR" corrispondente a "EXPR_1.child0";
		Type Checking su "EXPR_1" (deve essere subtype di List),
		Type Checking su "EXPR_2" (deve essere equivalente a Int);
//	(xvii):	tipo di "ACTARG";
		tipo di "EXPR" corrispondente a "ACTARG.child0";
		Type Checking su "ACTARG" (deve essere subtype di List);
//	(xiv):	tipo di "EXPR",
		tipo di "EXPR_NOTUNARYOP";
		tipo di "EXPR" corrispondente a List["EXPR".type];
		Type Checking su "EXPR" e "EXPR_NOTUNARYOP" 
			("EXPR_NOTUNARYOP" deve essere subtype di List[Any];
			 se "EXPR_NOTUNARYOP" = List[k] =/= List[Any], allora "EXPR.Type" deve essere uguale a k);
//	(xv):	tipo di "EXPR",
		tipo di "EXPR_NOTUNARYOP";
		tipo di "EXPR" corrispondente a quella della lista non vuota, o a List[Any] se entrambe lo sono;
		Type Checking su "EXPR" e "EXPR_NOTUNARYOP" 
			("EXPR" e "EXPR_NOTUNARYOP" devono essere di tipo List[k] e List[l];
			 se entrambe non sono vuote, allora k deve essere uguale a l);
	(xvi):	tipo di "EXPR";
		tipo di "EXPR" (parent) corrispondente a quello di "EXPR";
	(xvii): tipo di "EXPR";
		tipo di "EXPR" (parent) corrispondente a Bool;
		Type Checking su "EXPR" (deve essere Bool);
	(xviii):tipo di "EXPR";
		tipo di "EXPR" (parent) corrispondente a quello di "EXPR";
		Type Checking su "EXPR" (deve essere subtype di Double);
	(xix):	tipo di "LET_BLOCK_FUNC";
		tipo di "EXPR" (parent) corrispondente a quello di "LET_BLOCK_FUNC";
	(xx):	tipo di "IF_BLOCK_FUNC";
		tipo di "EXPR" (parent) corrispondente a quello di "IF_BLOCK_FUNC";
	(xxi):  stringa di "id",
		tipo di "id",
		cardinalità di "LACTARG",
		tipi degli elementi di "LACTARG";
		tipo di "EXPR" corrispondente al Return Type di "id";
		Declaration Check su "id",
		Type Checking su "id" (deve essere una Function),
		Arity Checking su "id",
		Type Checking su "LACTARG" (ogni argomento deve avere tipo compatibile col corrispondente arg);
	(xxii): tipo di "VALUE";
		tipo di "EXPR" corrispondente a quello di "VALUE"
EXPR_NOTUNARYOP: vedi corrispondenti regole in EXPR
LET_BLOCK_FUNC (i): 
		tipo di "EXPR";
		tipo di "LET_BLOCK_FUNC" (parent) corrispondente a quello di "EXPR";
IF_BLOCK_FUNC (i):
		tipo di "EXPR"_1 e "EXPR"_2;
		tipo di "EXPR" (parent) corrispondente a quello di "EXPR"_1;
		Type Checking su "EXPR"_1 e "EXPR"_2 (devono essere identici);
ACTARG	(i): 	nome di "id", tipo di "id";
		tipo di "ACTARG" corrispondente a quello di "id";
		Declaration Check su "id"
	(ii): 	tipo di "VALUE";
		tipo di "ACTARG" corrispondente a quello di "VALUE";
		;
	(iii):	tipo di "EXPR";
		tipo di "ACTARG" corrispondente a quello di "VALUE";
		;
LACTARG	(i):	;
		lista vuota di "ACTARG" attribuita a "LACTARG"; 
		;
	(ii):	;
		appendi "ACTARG" a "LACTARG";
		;
VALUE 	(i):	valore di "VALUE_BASIC",
		tipo di "VALUE_BASIC";
		valore di "VALUE" corrispondente a quello di "VALUE_BASIC",
		tipo di "VALUE" corrispondente a quello di "VALUE_BASIC";
		;
	(ii):	valore di "VALUE_LIST",
		tipo di "VALUE_LIST";
		valore di "VALUE" corrispondente a quello di "VALUE_LIST",
		tipo di "VALUE" corrispondente a quello di "VALUE_LIST";
		;
	(iii):	valore di "VALUE_TUPLE",
		tipo di "VALUE_TUPLE";
		valore di "VALUE" corrispondente a quello di "VALUE_TUPLE",
		tipo di "VALUE" corrispondente a quello di "VALUE_TUPLE";
		;
VALUE_BASIC	(i): 	valore di "val_int";
			valore di "VALUE_BASIC corrispondente a quello di "val_int",
			tipo di "VALUE_BASIC" corrispondente a Int;
			;
		(ii):	valore di "val_double";
			valore di "VALUE_BASIC corrispondente a quello di "val_double",
			tipo di "VALUE_BASIC" corrispondente a Double;
			;
		(iii):	valore di "val_bool";
			valore di "VALUE_BASIC corrispondente a quello di "val_bool",
			tipo di "VALUE_BASIC" corrispondente a Bool;
			;
		(iv):	valore di "val_char";
			valore di "VALUE_BASIC corrispondente a quello di "val_char",
			tipo di "VALUE_BASIC" corrispondente a Char;
			;
		(v):	valore di "val_string";
			valore di "VALUE_BASIC corrispondente a quello di "val_string",
			tipo di "VALUE_BASIC" corrispondente a String;
			;
VALUE_LIST	(i):	tipo di "LEXPR";
			tipo di "VALUE_LIST" corrispondente a List["LEXPR".Expr_1.Type];
			;
		(ii):	;
			tipo di "VALUE_LIST" corrispondente a List[Any];
			;
//VALUE_TUPLE	(i):	tipo di TEXPR (con lista dei tipi in TEXPR);
			tipo di "VALUE_TUPLE" corrispondente a 
				Tuple("TEXPR"[0].Type, "TEXPR"[1].Type, ... "TEXPR"[n]. Type);
			;
LEXPR	(i):	;
		aggiungi "EXPR" a "LEXPR";
		;
	(ii):	tipo di "LEXPR" e "EXPR";
		tipo di "LEXPR" corrispondente a quello di "LEXPR",
		aggiungi "EXPR" a "LEXPR";
		Type Checking su "EXPR" e "LEXPR" (dovrebbero essere equivalenti)
//TEXPR	(i):	;
		crea lista di espressioni per "TEXPR", appendici "EXPR_1" e "EXPR_2";
		;
	(ii):	;
		appendi "EXPR" alla lista di espressioni per "TEXPR";
		;
TYPE	(i):	tipo di "TYPE_VALUE";
		tipo di "TYPE" corrispondente a "TYPE_VALUE";
		;
	(ii):	tipo di "TYPE_FUNC";
		tipo di "TYPE" corrispondente a "TYPE_FUNC";
		;
TYPE_VALUE	(i): 	tipo di "TYPE_TUPLE";
			tipo di "TYPE_VALUE" corrispondente a "TYPE_TUPLE";
			;
		(ii):	tipo di "TYPE_LIST";
			tipo di "TYPE_VALUE" corrispondente a "TYPE_LIST";
			;
		(iii):	tipo di "TYPE_BASIC";
			tipo di "TYPE_VALUE" corrispondente a "TYPE_BASIC";
			;
TYPE_BASIC	(i):	;
			tipo di "TYPE_VALUE" corrispondente a Int;
			;
		(ii):	;
			tipo di "TYPE_VALUE" corrispondente a Double;
			;
		(iii):	;
			tipo di "TYPE_VALUE" corrispondente a Bool;
			;
		(iv):	;
			tipo di "TYPE_VALUE" corrispondente a Char;
			;
		(v):	;
			tipo di "TYPE_VALUE" corrispondente a String;
			;
TYPE_LIST	(i):	tipo di "TYPE_VALUE";
			tipo di "TYPE_LIST" corrispondente a List["TYPE_VALUE"];
			;
//TYPE_TUPLE	(i):	;
			tipo di "TYPE_TUPLE" corrispondente a Tuple();
			;
		(ii):	tipo di "TTYPE_VALUE";
			tipo di "TYPE_TUPLE" corrispondente a 
				Tuple("TTYPE_VALUE"[0], "TTYPE_VALUE"[1], ..., "TTYPE_VALUE"[n]);
			;
TYPE_FUNC	(i):	tipo di "TYPE_VALUE", 
			tipo di "TYPE_FUNC";
			tipo di "TYPE_FUNC" corrispondente a "TYPE_VALUE" -> "TYPE_FUNC" 
				(crea nuovo root di tipo Func con ramo sx corrispondente a "TYPE_VALUE" e
				 ramo dx corrispondente a "TYPE_FUNC");
			;
		(ii):	tipo di "TYPE_VALUE_1", 
			tipo di "TYPE_VALUE_2";
			tipo di "TYPE_FUNC" corrispondente a "TYPE_VALUE_1" -> "TYPE_VALUE_2" 
				(crea nuovo root di tipo Func con ramo sx corrispondente a "TYPE_VALUE_1" e
				 ramo dx corrispondente a "TYPE_VALUE_2");
			;
//TTYPE_VALUE	(i):	tipo di "TYPE_VALUE_1",
			tipo di "TYPE_VALUE_2";
			crea lista di tipi per "TTYPE_VALUE", appendici "TYPE_VALUE_1" e "TYPE_VALUE_2";
			;
		(ii):	tipo di "TTYPE_VALUE",
			tipo di "TYPE_VALUE";
			appendi "TYPE_VALUE" alla lista di tipi per "TTYPE_VALUE";
			;

---------------------------------------------------------------------------------------------------------------------
---- ERRORI SEMANTICI -----------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
 Wrong Type: Type checking failed
 Multiple Value Declaration: Uniqueness checking failed 
 Missing Value Declaration: Declaration check failed
 Multiple Value Assignment: Assignment Uniqueness check failed
 Mismatching Operand Type: operands have valid types, but they are not compatible with each other for a certain expression
 Mismatching Arity: Arity check failed
 Nested Lists not supported: after Type check that a variable contains a list of list
 Wrong Type in List Expression: expression type is not compatible with other expressions in the same list
 Not a Function: on Function Declaration
 Ogni volta che un errore viene rilevato, settare noCompileErrors = false e stampare msg di errore