import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Iterator;

parser code {:

	// Boolean flag that provides additional information for debugging purposes, when raised
	private boolean debug_mode = true; 

	// Flag that is set to true until the first compile-time error is detected
	private boolean noCompileErrors = true;
	
	/* Next Line and Next Column Index (the parser is LALR(1)), so the last symbol scanned is the following one */
	private int nextLine, nextColumn;
	/* Current Line and Column Index (i.e. yyline() and yycolumn() in JFlex) */
	private int currLine = 0, currColumn = 0;
	
	/* The fresh code we look for */
	private LinkedList<String> code;
		
	public LinkedList<String> getCode() {
		return code;
	}
	
	private void setCode(LinkedList<String> code) {
		this.code = code;
	}
	
	public boolean compileSuccess() {
		return noCompileErrors;
	}
	
	/* 
	 * 	Default Cup Function for reporting Syntax Errors
	 *  @param: java_cup.runtime.Symbol current - The last parsed symbol before raising the last Syntax Error 
	 *  @return: nothing
	 */
	public void syntax_error(java_cup.runtime.Symbol current) {
		report_error(current);
	}
		
	/* 
	 *  Inform the user that a Syntax Error has been raised, and inform them about the nature of the Syntax Error
	 *	@param: Object info - The last parsed symbol before raising the last Syntax Error
	 *  		String msg - The additional message describing the kind of Syntax Error
	 *	@return: nothing
	 */
    public void report_error(Object info) {
		noCompileErrors = false;
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
	
	/*
	 * Inform the user what caused a Syntax Error
	 * @param: String msg - the error msg
	 * @return: nothing
	 */
	public void report_syntax_error(String msg) {
		noCompileErrors = false;
		System.err.println(msg);
	}
	
	public void report_semantic_error(String msg) {
		noCompileErrors = false;
		System.err.print("ERROR: Semantic error");
        System.err.println(" (line "+currLine+", column "+currColumn+"): " + msg);
        //CUP$Parser$actions.symTableStack.dumpSymTableStack();
	}
	
	/*
	 * Function to retrieve values directly from the Stack
	 * @param: int position - position wrt the top of the Stack
	 * @return: Object - the corresponding element of the Stack 
	 */
    private Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
	
:};

action code {:

	private SymTableStack symTableStack = new SymTableStack();

:};

/*  In the Initialization Section, the typeMap (i.e. the list containing all declared types) is filled 
 *  with all the main Basic and Compound Types. 
 *  The only exception are Tuples, whose Type corresponds to the combination of the types of its elements;
 *  since such a Type would need too much space inside the typeMap, it is the ONLY Type that is not saved in the typeMap;
 *  so, it must be handled with specific procedures
 *  The "Any" Type acts as a wildcard and represents any possible Type (it represents Type Parameters)
 */
init with {:
		
		// Create the Table containing all Types and their Types
		Type.createTypeMap();
		
		//Type.dumpTypeMap();
		//Type.testType();
		//SymTableStack.testSymTableStack();
:}

/* Because of a bug in JavaCupMainDrawTree, the "scan with" directive does not substitute the default call to next_token as expected.
 * Instead, the user code is just inserted before the aforementioned call, preventing the user from customizing 
 * the scanning method (an "Unreachable statement" compiler error arises). 
 * For this reason, it is necessary to manually force the user code execution
 * This is the reason behind the fake conditional statement below
 */
scan with {:   
	if (true) {
		Scanner scanner = (Scanner) this.getScanner();
		Symbol s = scanner.next_token_custom();
		if (s.left != -1) {
			currLine = nextLine;		// keep track of current line and column
			currColumn = nextColumn;
			nextLine = s.left;
			nextColumn = s.right;
		}
		// build the graphical representation of the Parsing Tree
		Tree.push(s.toString(), 0);
		return s;
	}	
:}

/// ///////////////////////// ///
///	  TERMINALS (lowercase)   ///
/// ///////////////////////// ///

terminal main;
terminal eq, clns, cm, ro, rc, bo, bc, arrow, sep/*, us */;
terminal plus, minus, times, div, intdiv, rem, uminus, and, or, not;
//terminal head, tail, cons, conc; 
terminal index;
terminal releq, relnoteq, relge, relgt, relle, rellt;
terminal indent, dedent;
//terminal where, pipe;
terminal do_begin, if_begin, then, else_begin, let, in, print;
terminal Integer val_int;
terminal Double val_double;
terminal Boolean val_bool;
terminal Character val_char;
terminal String val_string;
terminal type_int, type_double, type_bool, type_string, type_char;
terminal String id;

/// ///////////////////////// ///
///	NON TERMINALS (uppercase) ///
/// ///////////////////////// ///

non terminal AST.Program PROGRAM;
non terminal AST.FunctPart FUNCT_PART;
non terminal AST.ImperPart IMPER_PART;
non terminal LinkedList<AST.DoStmt> IO_ACTIONS;
non terminal AST.IOAction IO_ACTION;
non terminal AST.Print PRINT;
non terminal AST.Expr COND, EXPR;
non terminal AST.ExprList EXPR_LIST, LEXPR;
non terminal AST.FunctCall FUNCT_CALL;
//non terminal Expr EXPR_NOTUNARYOP;
non terminal AST.Expr ACTARG;
non terminal LinkedList<AST.Expr> LACTARG;
non terminal AST.LFormArg LFORMARG;
//non terminal WHERE, WHERE_STMTS, GUARDS, GUARD;
non terminal LinkedList<AST.Stmt> LET_STMTS, GLOBAL_STMTS;
non terminal AST.DoBlock DO_BLOCK;
non terminal AST.LetBlockFunc LET_BLOCK_FUNC;
non terminal AST.LetBlockImper LET_BLOCK_IMPER;
non terminal AST.IfBlockFunc IF_BLOCK_FUNC;
non terminal AST.IfBlockImper IF_BLOCK_IMPER;
non terminal AST.Stmt STMT;
non terminal AST.Stmt DEF_VALUE;
non terminal AST.DefFunct DEF_FUNCT;
non terminal AST.DeclType DECL_TYPE;
non terminal Type TYPE, TYPE_VALUE, TYPE_FUNC, TYPE_LIST, TYPE_BASIC;
//non terminal LinkedList<Type> TTYPE_VALUE;
non terminal AST.Value VALUE, VALUE_BASIC;
//non terminal PATTERN, LPATTERN_CM, LPATTERN_CONS;
//non terminal PATTERN_LIST, PATTERN_TUPLE;

/// ///////////////////////// ///
///    PRECEDENCE RULES		  ///
/// ///////////////////////// ///

//precedence left conc;
//precedence right cons;
precedence left or;
precedence left and;
precedence nonassoc releq, relnoteq, relgt, relge, rellt, relle;
precedence left plus, minus;
precedence left times, div, intdiv, rem;
precedence nonassoc index;
precedence nonassoc not, uminus;

start with PROGRAM;

/// ///////////////////////// ///
///	   PRODUCTION RULES       ///
/// ///////////////////////// ///
 
PROGRAM ::= /* empty program */ 
			{:
				if (noCompileErrors) {
				System.out.println("CODE COMPILED SUCCESSFULLY");
				}
				RESULT = new AST.Program(null, null);
			:}
		  | indent
			{:	// push the top-level symtable
				symTableStack.pushSymTable();
				if (debug_mode) System.out.println("DEBUG: Top-level Symtable pushed");
			:}
			FUNCT_PART:funct_part IMPER_PART:imper_part 
			{:
				symTableStack.popSymTable();
				if (debug_mode) System.out.println("DEBUG: Top-level Symtable popped");
			:}
			dedent 
			{:  // pop the top-level symtable
				if (noCompileErrors) {
					System.out.println("CODE COMPILED SUCCESSFULLY");
					RESULT = new AST.Program(funct_part, imper_part);
					// Code generation
					RESULT.codegen();
					// Retrieve the code
					setCode(RESULT.getCode());
				}	
				else {
					System.out.println("CODE NOT COMPILED: FAILED");
					RESULT = new AST.Program(null, null);
				}
			:}
;

/// ////////////////// ///
///  IMPERATIVE PART   ///
/// ////////////////// ///

IMPER_PART ::= 
			main eq IO_ACTION:io_action
			{:
				RESULT = new AST.ImperPart(io_action);
			:}			
		  | main eq error
			{: 
				report_syntax_error("Error in Main"); 
				RESULT = new AST.ImperPart(null);
			:}
;

IO_ACTION ::= PRINT:print
			{: 
				RESULT = print; 
			:}
            | DO_BLOCK:do_block
			{: 
				RESULT = do_block; 
			:}
			| IF_BLOCK_IMPER:if_block_imper
			{: 
				RESULT = if_block_imper; 
			:}
;

IO_ACTIONS ::= 
		  IO_ACTIONS:io_actions sep IO_ACTION:io_action
		{:
			io_actions.add(io_action);
			RESULT = io_actions;
		:}
		| IO_ACTIONS:io_actions sep LET_BLOCK_IMPER:let_block_imper
		{:
			io_actions.add(let_block_imper);
			RESULT = io_actions;
		:}
		| IO_ACTION:io_action
		{: 
			LinkedList<AST.DoStmt> ioActions = new LinkedList<>();
			ioActions.add(io_action);
			RESULT = ioActions;
		:}
		| LET_BLOCK_IMPER:let_block_imper
		{:
			LinkedList<AST.DoStmt> ioActions = new LinkedList<>();
			ioActions.add(let_block_imper);
			RESULT = ioActions;
		:}
		| IO_ACTIONS:io_actions sep error
		{: 
			report_syntax_error("Error in Imperative Part Statement"); 
			RESULT = io_actions;
		:}
;

PRINT ::= print ACTARG:actarg
	{:
		Type argType = actarg.getType();
		if (argType.isSubtype("Double") || argType.isSubtype("String") || argType.isSubtype("Char")) {
			RESULT = new AST.Print(actarg);
		}
		else {
			report_semantic_error("Print does not support the Argument Type");
			RESULT = new AST.Print(null);
		}
	:}
;

DO_BLOCK ::=
		do_begin indent 
		{:
			symTableStack.pushSymTable();
			if (debug_mode) System.out.println("DEBUG: Do Block - Symtable pushed");
		:}
		IO_ACTIONS:io_actions dedent
		{:
			symTableStack.popSymTable();
			if (debug_mode) System.out.println("DEBUG: Do Block - Symtable popped");			
			RESULT = new AST.DoBlock(io_actions);
		:}
	  | do_begin indent error dedent 
		{: 
			report_syntax_error("Error in Do Block"); 
			RESULT = new AST.DoBlock(null);
		:}
;

IF_BLOCK_IMPER ::= 
		if_begin COND:cond then IO_ACTION:io_action_then else_begin IO_ACTION:io_action_else
		{:
			RESULT = new AST.IfBlockImper(cond, io_action_then, io_action_else);
		:}
	  | if_begin error then IO_ACTION:io_action_then else_begin IO_ACTION:io_action_else 
		{: 
			report_syntax_error("Error in Condition of If Statement"); 
			RESULT = new AST.IfBlockImper(null, io_action_then, io_action_else);
		:}
	  | if_begin COND:cond then error else_begin IO_ACTION:io_action_else 
		{: 
			report_syntax_error("Error in Then Block of If Statement"); 
			RESULT = new AST.IfBlockImper(cond, null, io_action_else);
		:}
	  | if_begin COND:cond error else_begin IO_ACTION:io_action_else 
		{: 
			report_syntax_error("Missing \"Then\" in If Statement"); 
			RESULT = new AST.IfBlockImper(cond, null, io_action_else);
		:}
;

LET_BLOCK_IMPER ::= 
		let indent LET_STMTS:let_stmts dedent// IO_ACTION:io_action 
		{:
			RESULT = new AST.LetBlockImper(let_stmts); //, io_action);
		:}
	  /*| let error dedent // IO_ACTION:io_action
		{: 
			report_syntax_error("Error in Let Statements of a Let Block"); 
			RESULT = new AST.LetBlockImper(null); //, io_action);
		:}*/
;
// DEF_FUNCT not supported (for now)
LET_STMTS ::= LET_STMTS:let_stmts sep DECL_TYPE:decl_type
			{:
				if(decl_type.getType().isSubtype("Function")) {
					report_semantic_error("No Support for Local Functions");
				}
				RESULT = let_stmts;
				RESULT.add(decl_type);
			:}
			| LET_STMTS:let_stmts sep DEF_VALUE:def_value
			{:
				RESULT = let_stmts;
				RESULT.add(def_value);
			:}
			| DECL_TYPE:decl_type
			{:
				if(decl_type.getType().isSubtype("Function")) {
					report_semantic_error("No Support for Local Functions");
				}
				RESULT = new LinkedList<AST.Stmt>();
				RESULT.add(decl_type);
			:}
			| DEF_VALUE:def_value
			{:
				RESULT = new LinkedList<AST.Stmt>();
				RESULT.add(def_value);
			
			:}
;

/// ////////////////// ///
///  FUNCTIONAL PART   ///
/// ////////////////// ///
 
FUNCT_PART ::= GLOBAL_STMTS:global_stmts
			{:
				RESULT = new AST.FunctPart(global_stmts);
			:}
; 
 
GLOBAL_STMTS ::= /* empty List of Statements section */
			{:
				RESULT = new LinkedList<AST.Stmt>();
			:}
			 | GLOBAL_STMTS:global_stmts STMT:stmt sep
			{:
				global_stmts.add(stmt);
				RESULT = global_stmts;
			:}
			 | GLOBAL_STMTS:global_stmts error sep 
			{: 
				report_syntax_error("Error in Functional Statement"); 
				global_stmts.add(null);
				RESULT = global_stmts;
			:}
;

///  STATEMENTS  ///

STMT ::= DECL_TYPE:decl_type
		{: // Global Lists and Functions returning Lists are not supported in this version of the compiler 
			if (decl_type.getType().isSubtype("List")) {
				report_semantic_error("Global Lists not supported");
			}
			RESULT = decl_type;
		:}
	   | DEF_VALUE:def_value
	   {:
			RESULT = def_value;
	   :}
	   | DEF_FUNCT:def_funct
	   {:
			RESULT = def_funct;
	   :}
;

DECL_TYPE ::= id:id cm DECL_TYPE:decl_type
			{:
				Type type = decl_type.getType();
				if (!symTableStack.isLocallyDeclared(id) && !(type.isSubtype("Function") && type.returnType().isSubtype("List"))) {
					symTableStack.putEntry(id, new SymTableStack.SymTableEntry(type));
				}
				else if (symTableStack.isLocallyDeclared(id)) {
					report_semantic_error("Multiple Value Declaration (Symbol \"" + id + "\")");
				}
				else {
					report_semantic_error("Lists as a Return Value are not supported");
				}
				RESULT = new AST.DeclType(new Type(type));
			:}
			| id:id clns TYPE:type
			{:
				if (!symTableStack.isLocallyDeclared(id) && !(type.isSubtype("Function") && type.returnType().isSubtype("List"))) {
					symTableStack.putEntry(id, new SymTableStack.SymTableEntry(type));
				}
				else if (symTableStack.isLocallyDeclared(id)) {
					report_semantic_error("Multiple Value Declaration (Symbol \"" + id + "\")");
				}
				else {
					report_semantic_error("Lists as a Return Value are not supported");
				}
				RESULT = new AST.DeclType(type);
			:}
; 

/* pattern and expr should be of the same type */
//DEF_VALUE ::= PATTERN eq EXPR
DEF_VALUE ::= id:id 
			{:
				if (symTableStack.isDeclared(id) && symTableStack.isLocallyDeclared(id) && !symTableStack.isAssigned(id)) {
					symTableStack.getEntry(id).setIsAssigned(true);
				}
				else {
					if (!symTableStack.isDeclared(id)) {
						report_semantic_error("Missing Value Declaration (Symbol \"" + id + "\")");
					}
					else if (!symTableStack.isLocallyDeclared(id)) {
						report_semantic_error("Value is not Locally Declared (Symbol \"" + id + "\")");
					}
					else if (symTableStack.isAssigned(id)) {
						report_semantic_error("Multiple Value Assignment (Symbol \"" + id + "\")");
					}
				}
			:}
			eq EXPR:expr
			{:
				if (symTableStack.isDeclared(id) && symTableStack.isLocallyDeclared(id) && symTableStack.isAssigned(id) && !expr.type.isEquivalent(symTableStack.getEntry(id).getType().getTypeName())) {
						report_semantic_error("Mismatching Type on Assignment (Symbol \"" + id + "\")"); 
				}
				if (symTableStack.isGlobal(id)) {
					// Global Values are actually Nullary Functions
					ArrayList<String> argNames = new ArrayList<>();
					ArrayList<Type> argTypes = new ArrayList<>();
					AST.LFormArg lformarg = new AST.LFormArg(argNames, argTypes, expr.getType());
					RESULT = new AST.DefFunct(id, lformarg, expr);
				}
				else {
					RESULT = new AST.DefValue(symTableStack.createUniqueId(id), expr);
				}
			:}
;
/* no nullary functions */
DEF_FUNCT ::= id:id {: 
					if (symTableStack.isDeclared(id) && symTableStack.isLocallyDeclared(id) && !symTableStack.isAssigned(id)) {
						symTableStack.getEntry(id).setIsAssigned(true);	
					}
					else if (!symTableStack.isDeclared(id)) {
						report_semantic_error("Missing Function Declaration (Symbol \"" + id + "\")");
					}
					else if (!symTableStack.isLocallyDeclared(id)) {
						report_semantic_error("Function is not Locally Declared (Symbol \"" + id + "\")");
					}
					else if (symTableStack.isAssigned(id)) {
						report_semantic_error("Multiple Function Assignment (Symbol \"" + id + "\")");
					}
					symTableStack.pushSymTable();
					if (debug_mode) System.out.println("DEBUG: Function Declaration - Symtable pushed");
			   :}
			   LFORMARG:lformarg eq 
			   EXPR:expr {:
					Type idType = null;
					if (symTableStack.isDeclared(id)){
						idType = symTableStack.getEntry(id).getType();
						if (idType != null && !idType.isSubtype("Function")) {
							report_semantic_error("Not a Function (Symbol \"" + id + "\")");
						}
						else if (!idType.hasArity(lformarg.getArgNames().size())) {
							report_semantic_error("Mismatching Arity (Symbol \"" + id + "\")");
						}
						else if (!expr.getType().isEquivalent(idType.returnType().getTypeName())) {
							report_semantic_error("Return Type is not equivalent to the Expression Type (Symbol \"" + id + "\")");
						}
					}
					symTableStack.popSymTable();
					if (debug_mode) System.out.println("DEBUG: Function Declaration - Symtable popped");
					RESULT = new AST.DefFunct(symTableStack.createUniqueId(id), lformarg, expr);
			   :}  
;

/* GUARDS ::= GUARDS sep GUARD
         | GUARD
;

   GUARD ::= pipe COND eq EXPR
; */

/* WHERE ::= // no where section 
        | where indent WHERE_STMTS dedent
; 

   WHERE_STMTS ::= WHERE_STMTS sep DECL 
			  | DECL
;*/

///  PATTERN MATCHING   ///

/*LFORMARG ::= LFORMARG PATTERN
		   | PATTERN
;

PATTERN ::= PATTERN_LIST
		  | PATTERN_TUPLE
		  | VALUE_BASIC
		  | us
		  | id
;

PATTERN_LIST ::= ro PATTERN cons LPATTERN_CONS rc // value constructor pattern
			   | bo LPATTERN_CM bc	// value pattern
			   | bo bc
;

LPATTERN_CONS ::= PATTERN
				| PATTERN cons LPATTERN_CONS
;

PATTERN_TUPLE ::= ro PATTERN cm LPATTERN_CM rc
				| ro rc
;

LPATTERN_CM ::= PATTERN
			  | PATTERN cm LPATTERN_CM
; */

LFORMARG ::= LFORMARG:lformarg id:id 
			{:
				Type propType = lformarg.getPropType();
				if (!symTableStack.isLocallyDeclared(id) && propType != null && propType.isSubtype("Function")) {
					Type argTree = new Type(propType.getTypeParam(0));
					symTableStack.putEntry(id, new SymTableStack.SymTableEntry(argTree, true));
					lformarg.getArgNames().add(symTableStack.createUniqueId(id));
					lformarg.getArgTypes().add(argTree);
					RESULT = new AST.LFormArg(lformarg.getArgNames(), lformarg.getArgTypes(), propType.getTypeParam(1));
				}
				else if (symTableStack.isLocallyDeclared(id)) {
					report_semantic_error("Multiple Argument Declaration (Symbol \"" + id + "\")");
					// Error Recovery
					lformarg.getArgNames().add(symTableStack.createUniqueId(id));
					lformarg.getArgTypes().add(Type.getType("error"));
					RESULT = new AST.LFormArg(lformarg.getArgNames(), lformarg.getArgTypes(), propType.getTypeParam(1));
				}
				else {
					report_semantic_error("Mismatching Arity in Function"); 
					// Error Recovery
					lformarg.getArgNames().add(symTableStack.createUniqueId(id));
					lformarg.getArgTypes().add(Type.getType("error"));
					RESULT = new AST.LFormArg(lformarg.getArgNames(), lformarg.getArgTypes(), Type.getType("error"));
				}
			:}
		   | id:id 
		   {:
				String funcName = (String) parser.stack(-2);
				if (symTableStack.isDeclared(funcName)) {
					Type type = symTableStack.getEntry(funcName).getType();
					if (!symTableStack.isLocallyDeclared(id) && type != null && type.isSubtype("Function")) {
						Type argTree = new Type(type.getTypeParam(0));
						symTableStack.putEntry(id, new SymTableStack.SymTableEntry(argTree, true));
						ArrayList<String> argNames = new ArrayList<>();
						ArrayList<Type> argTypes = new ArrayList<>();
						argNames.add(symTableStack.createUniqueId(id));
						argTypes.add(argTree);
						RESULT = new AST.LFormArg(argNames, argTypes, type.getTypeParam(1));
					}
					else if (symTableStack.isLocallyDeclared(id)) {
						report_semantic_error("Multiple Argument Declaration (Symbol \"" + id + "\")");
						// Error Recovery
						ArrayList<String> argNames = new ArrayList<>();
						ArrayList<Type> argTypes = new ArrayList<>();
						argNames.add(symTableStack.createUniqueId(id));
						argTypes.add(Type.getType("error"));
						RESULT = new AST.LFormArg(argNames, argTypes, type.getTypeParam(1));
					}
					else {
						report_semantic_error("Mismatching Arity in Function"); 
						// Error Recovery
						ArrayList<String> argNames = new ArrayList<>();
						ArrayList<Type> argTypes = new ArrayList<>();
						argNames.add(symTableStack.createUniqueId(id));
						argTypes.add(Type.getType("error"));
						RESULT = new AST.LFormArg(argNames, argTypes, Type.getType("error"));
					}
				}
				else {
					report_semantic_error("Missing Function Declaration (Symbol \"" + funcName + "\")");
					ArrayList<String> argNames = new ArrayList<>();
					ArrayList<Type> argTypes = new ArrayList<>();
					argNames.add(symTableStack.createUniqueId(id));
					argTypes.add(Type.getType("error"));
					RESULT = new AST.LFormArg(argNames, argTypes, Type.getType("error"));
				}
				
		   :}
;

/* special expression management for boolean conditions */
COND ::= EXPR:expr {:
					if (!expr.type.isEquivalent("Bool")) {
						report_semantic_error("Wrong Type in Condition (Expected Type: Bool)");
					}
					RESULT = expr;
			   :}
;

///   EXPRESSIONS   ///

//EXPR ::= //EXPR:expr1 plus EXPR_NOTUNARYOP:expr2
EXPR ::= EXPR:expr1 plus EXPR:expr2
		{:
			String opType = "+";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(new Type(expr1.type), AST.ExprKind.PLUS, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.PLUS, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.PLUS, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.PLUS, subExpressions);
			}
		:}
	   //| EXPR:expr1 minus EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 minus EXPR:expr2
	   {:
			String opType = "-";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(new Type(expr1.type), AST.ExprKind.MINUS, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.MINUS, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");	
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.MINUS, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.MINUS, subExpressions);
			}
		:}
	   //| EXPR:expr1 times EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 times EXPR:expr2
	   {:
			String opType = "*";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(new Type(expr1.type), AST.ExprKind.TIMES, subExpressions);		
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.TIMES, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.TIMES, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.TIMES, subExpressions);
			}
		:}
	   //| EXPR:expr1 div EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 div EXPR:expr2
	   {:
			String opType = "/";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Double"), AST.ExprKind.DIV, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.DIV, subExpressions); 
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.DIV, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.DIV, subExpressions);
			}
		:}
	   //| EXPR:expr1 intdiv EXPR_NOTUNARYOP:expr2 
	   | EXPR:expr1 intdiv EXPR:expr2 
	   {:
			String opType = "div";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Int") && expr2.type.isSubtype("Int") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Int"), AST.ExprKind.INTDIV, subExpressions);
			}
			else if (!expr1.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.INTDIV, subExpressions);
			}
			else if (!expr2.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.INTDIV, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.INTDIV, subExpressions);
			}
		:}
	   | EXPR:expr1 rem EXPR:expr2 
	   {:
			String opType = "rem";	
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Int") && expr2.type.isSubtype("Int") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Int"), AST.ExprKind.REM, subExpressions);
			}
			else if (!expr1.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.REM, subExpressions);
			}
			else if (!expr2.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.REM, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.REM, subExpressions);
			}
		:}
	   //| EXPR:expr1 and EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 and EXPR:expr2
	   {:
			String opType = "&&";		
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Bool") && expr2.type.isSubtype("Bool") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.AND, subExpressions);
			}
			else if (!expr1.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.AND, subExpressions);
			}
			else if (!expr2.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.AND, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.AND, subExpressions);
			}
	   :}
	   //| EXPR:expr1 or EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 or EXPR:expr2
	    {:
			String opType = "||";		
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("Bool") && expr2.type.isSubtype("Bool") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.OR, subExpressions);
			}
			else if (!expr1.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.OR, subExpressions);
			}
			else if (!expr2.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.OR, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.OR, subExpressions);
			}
	   :}
	   | EXPR:expr1 relnoteq EXPR:expr2
	    {:
			String opType = "/=";		
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.RELNOTEQ, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELNOTEQ, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELNOTEQ, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELNOTEQ, subExpressions);
			}
		:}
	   //| EXPR:expr1 releq EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 releq EXPR:expr2
	    {:
			String opType = "==";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.RELEQ, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELEQ, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELEQ, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELEQ, subExpressions);
			}
		:}
	   //| EXPR:expr1 relgt EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 relgt EXPR:expr2
	   {:
			String opType = ">";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.RELGT, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELGT, subExpressions); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELGT, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELGT, subExpressions);
			}
		:}
	   //| EXPR:expr1 relge EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 relge EXPR:expr2
	   {:
	   		String opType = ">=";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.RELGE, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELGE, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELGE, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELGE, subExpressions);
			}
		:}
	   //| EXPR:expr1 rellt EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 rellt EXPR:expr2
	   {:
			String opType = "<";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.RELLT, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELLT, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELLT, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELLT, subExpressions);
			}
		:}
	   //| EXPR:expr1 relle EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 relle EXPR:expr2
	   {:
			String opType = "<=";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.RELLE, subExpressions);
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELLE, subExpressions);
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELLE, subExpressions);
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.RELLE, subExpressions);
			}
		:}
	   //| EXPR:expr1 index EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 index EXPR:expr2
	   {:
			String opType = "!!";
			AST.BasicExpr[] subExpressions = { expr1, expr2 };
			if (expr1.type.isSubtype("List") && expr2.type.isSubtype("Int")) {
				RESULT = new AST.Expr(new Type(expr1.type.getTypeParam(0)), AST.ExprKind.INDEX, subExpressions);
			}
			else if (!expr1.type.isSubtype("List")){
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.INDEX, subExpressions); 
			}
			else {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.INDEX, subExpressions); 
			}
	   :}
	   //| EXPR cons EXPR_NOTUNARYOP
	   //| EXPR conc EXPR_NOTUNARYOP
	   | ro EXPR:expr rc
	   {:
			RESULT = expr;
	   :}
	   //| ro not EXPR:expr rc
	   | not EXPR:expr  
	   {:
			String opType = "not";
			AST.BasicExpr[] subExpressions = { expr };
			if(expr.type.isSubtype("Bool")) {
				RESULT = new AST.Expr(Type.getType("Bool"), AST.ExprKind.NOT, subExpressions);
			}
			else {
				report_semantic_error("Wrong Type in \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.NOT, subExpressions); 
			}
	   :}
	   | minus EXPR:expr
		//| ro minus EXPR:expr rc 
	   {:
			String opType = "Unary \"-\"";
			AST.BasicExpr[] subExpressions = { expr };
			if(expr.type.isSubtype("Double")){
				RESULT = new AST.Expr(new Type(expr.type), AST.ExprKind.UMINUS, subExpressions);
			}
			else {
				report_semantic_error("Wrong Type in \"" + opType + "\" Expression");
				RESULT = new AST.Expr(Type.getType("error"), AST.ExprKind.UMINUS, subExpressions); 
			}
	   :} %prec uminus 
	   | LET_BLOCK_FUNC:let_block_func 
	   {:
			AST.BasicExpr[] subExpressions = { let_block_func };
			RESULT = new AST.Expr(let_block_func.type, AST.ExprKind.LET_BLOCK_FUNC, subExpressions);
	   :}
	   | IF_BLOCK_FUNC:if_block_func 
	   {:
			AST.BasicExpr[] subExpressions = { if_block_func };
			RESULT = new AST.Expr(if_block_func.type, AST.ExprKind.IF_BLOCK_FUNC, subExpressions);
	   :}
	   | FUNCT_CALL:funct_call
	   {:
			AST.BasicExpr[] subExpressions = { funct_call };
			RESULT = new AST.Expr(funct_call.type, AST.ExprKind.FUNCT_CALL, subExpressions);
	   :}
	   | VALUE:value
	   {:
			AST.BasicExpr[] subExpressions = { value };
			RESULT = new AST.Expr(value.type, AST.ExprKind.VALUE, subExpressions);
	   :}
	   | EXPR_LIST:expr_list
	   {:
			AST.BasicExpr[] subExpressions = { expr_list };
			RESULT = new AST.Expr(expr_list.type, AST.ExprKind.EXPR_LIST, subExpressions);
	   :}
;

FUNCT_CALL ::= id:id LACTARG:lactarg 
	   {:
			int nArgs = lactarg.size();
			Type funcType = null;
			boolean failedArgsTypeChecking = false;
			if(symTableStack.isDeclared(id) && symTableStack.isAssigned(id)) {
				funcType = symTableStack.getEntry(id).getType();
				//funcType.dumpType(0);
				// This is a Value Call
				if (nArgs == 0) {
					if (funcType != null && !funcType.isSubtype("Function")) { // This is not a Function Call, but a reference to a Value
						//RESULT = new AST.Expr(new Type(funcType));
						RESULT = new AST.FunctCall(new Type(funcType), symTableStack.createUniqueId(id), lactarg); 
					}
					else {
						// Error Recovery
						report_semantic_error("Not a Value (Symbol \"" + id + "\")");
						//RESULT = new AST.Expr(Type.getType("error"));  
						RESULT = new AST.FunctCall(Type.getType("error"), symTableStack.createUniqueId(id), lactarg);
					}
				}
				// This is a Function Call
				else if (nArgs > 0) {
					if (funcType != null && funcType.isSubtype("Function") && funcType.hasArity(nArgs)) {
						for (AST.Expr actarg : lactarg) {
							if (!actarg.type.isEquivalent(funcType.getTypeParam(0)))
								failedArgsTypeChecking = true;
							funcType = funcType.getTypeParam(1); //extract the right child of the funcType Tree
						}
						if (!failedArgsTypeChecking) {
							//RESULT = new AST.Expr(new Type(funcType));
							RESULT = new AST.FunctCall(new Type(funcType), symTableStack.createUniqueId(id), lactarg);
						}	
						else {
							// Error Recovery
							report_semantic_error("Wrong Type in Arguments applied to Function " + id);
							//RESULT = new AST.Expr(Type.getType("error")); 
							RESULT = new AST.FunctCall(Type.getType("error"), symTableStack.createUniqueId(id), lactarg);
						}
					}
					else if (funcType == null || !funcType.isSubtype("Function")) {
						// Error Recovery
						report_semantic_error("Not a Function (Symbol \"" + id + "\")");
						//RESULT = new AST.Expr(Type.getType("error")); 
						RESULT = new AST.FunctCall(Type.getType("error"), symTableStack.createUniqueId(id), lactarg);
					}
					else if (!funcType.hasArity(nArgs)) {
						// Error Recovery
						report_semantic_error("Mismatching Arity (Symbol \"" + id + "\")");
						//RESULT = new AST.Expr(Type.getType("error")); 
						RESULT = new AST.FunctCall(Type.getType("error"), symTableStack.createUniqueId(id), lactarg);
					}
				}
			}
			else if (!symTableStack.isDeclared(id)){
				// Error Recovery
				report_semantic_error("Missing Value Declaration (Symbol \"" + id + "\")");
				RESULT = new AST.FunctCall(Type.getType("error"), symTableStack.createUniqueId(id), lactarg);
			}
			else if (!symTableStack.isAssigned(id)) {
				// Error Recovery
				report_semantic_error("Value Declared but not Assigned (Symbol \"" + id + "\")");
				RESULT = new AST.FunctCall(Type.getType("error"), symTableStack.createUniqueId(id), lactarg);
			}
	   :}
;

LET_BLOCK_FUNC ::= 	let indent 
					{:
						symTableStack.pushSymTable();
						if (debug_mode) System.out.println("DEBUG: Let Statement - Symtable pushed");
					:} 
					LET_STMTS:let_stmts dedent in EXPR:expr {:
						symTableStack.popSymTable();
						if (debug_mode) System.out.println("DEBUG: Let Statement - Symtable popped");
						RESULT = new AST.LetBlockFunc(new Type(expr.type), let_stmts, expr);
					:}
					| let error in EXPR:expr
					{: report_syntax_error("Error in Statement inside a Let Block"); 
						RESULT = new AST.LetBlockFunc(Type.getType("error"), null, expr);
					:}
;

IF_BLOCK_FUNC ::= if_begin COND:cond then EXPR:thenBody else_begin EXPR:elseBody 
				{:
					if(thenBody.type.isEquivalent(elseBody.type)) {
						RESULT = new AST.IfBlockFunc(thenBody.type, cond, thenBody, elseBody);
					}
					else {
						report_semantic_error("Multiple Return Types for If Statement");
						RESULT = new AST.IfBlockFunc(Type.getType("error"), cond, thenBody, elseBody); 
					}
				:}
				| if_begin error else_begin EXPR:elseBody
				{:  
					report_syntax_error("Error in Condition inside an If-Then-Else Block");
					RESULT = new AST.IfBlockFunc(Type.getType("error"), null, null, elseBody);
				:}
				| if_begin COND:cond then error else_begin EXPR:elseBody
				{:  
					report_syntax_error("Error in Then Block of an In-Then-Else Block"); 
					RESULT = new AST.IfBlockFunc(Type.getType("error"), cond, null, elseBody);
				:}
				//| error then EXPR else_begin EXPR
				//	{: report_syntax_error("Missing 'if' inside an If-Then-Else Block"); 
				//		RESULT = new AST.IfBlockFunc(Type.getType("error"));
				//	:}
				| if_begin COND:cond error else_begin EXPR:elseBody
				{: 
					report_syntax_error("Missing 'then' inside an If-Then-Else Block"); 
					RESULT = new AST.IfBlockFunc(Type.getType("error"), cond, null, elseBody);
				:}
;

// DA QUI
///    args for function call   ///

ACTARG ::= id:id 
		{:
			Type idType;
			LinkedList<AST.Expr> actArgs = new LinkedList<>();
			AST.FunctCall functCall;
			AST.BasicExpr[] subExpressions = new AST.BasicExpr[1];
			if (symTableStack.isDeclared(id) && symTableStack.isAssigned(id)) {
				idType = symTableStack.getEntry(id).getType();
				functCall = new AST.FunctCall(idType, id, actArgs);
				subExpressions[0] = functCall;
				RESULT = new AST.Expr(new Type(idType), AST.ExprKind.FUNCT_CALL, subExpressions);
			} // DA QUI
			else if (!symTableStack.isDeclared(id)){
				report_semantic_error("Missing Value Declaration (Symbol \"" + id + "\")");
				idType = Type.getType("error");
				functCall = new AST.FunctCall(idType, id, actArgs);
				subExpressions[0] = functCall;
				RESULT = new AST.Expr(new Type(idType), AST.ExprKind.FUNCT_CALL, subExpressions);
			}
			else {
				report_semantic_error("Value Declared but Not Assigned (Symbol \"" + id + "\")");
				idType = Type.getType("error");
				functCall = new AST.FunctCall(idType, id, actArgs);
				subExpressions[0] = functCall;
				RESULT = new AST.Expr(new Type(idType), AST.ExprKind.FUNCT_CALL, subExpressions);
			}
		:}
         | VALUE:value
		{:
			AST.BasicExpr[] subExpressions = { value };
			RESULT = new AST.Expr(value.type, AST.ExprKind.VALUE, subExpressions);			
		:}
		 | ro EXPR:expr rc
		{:
			RESULT = expr;			
		:}
;

// list of input arguments for function call
LACTARG ::= /* empty list of args: we call a Value */
			{: 
				RESULT = new LinkedList<AST.Expr>();
			:}
		  | LACTARG:lactarg ACTARG:actarg
			{:
				lactarg.add(actarg);
				RESULT = lactarg;
			:}
;

///   VALUES   ///

VALUE ::= VALUE_BASIC:value_basic
		{: 
			RESULT = value_basic;
		:}
		/*| EXPR_LIST:value_list
		{:
			RESULT = new Value(value_list.type, value_list.value);
		:}*/
//		| VALUE_TUPLE
;

// VALUE_BASIC represents constants
VALUE_BASIC ::= 
		val_int:val_int
			{:
				RESULT = new AST.Value(Type.getType("Int"), val_int);
			:}
	  | val_double:val_double
			{:
				RESULT = new AST.Value(Type.getType("Double"), val_double);
			:}	  
	  | val_bool:val_bool
			{:
				RESULT = new AST.Value(Type.getType("Bool"), val_bool);
			:}
	  | val_char:val_char
			{:
				RESULT = new AST.Value(Type.getType("Char"), val_char);
			:}
	  | val_string:val_string
			{:
				RESULT = new AST.Value(Type.getType("String"), val_string);
			:}
;

// Empty List can only be directly used in declaration, to avoid Type Variables propagation
EXPR_LIST ::= bo LEXPR:lexpr bc
		{:
			RESULT = lexpr;
		:}
;

//VALUE_TUPLE ::= ro TEXPR rc
//;

LEXPR ::= EXPR:expr
		{:
			ArrayList<AST.Expr> lexpr = new ArrayList<>();
			lexpr.add(expr);
			Type type = Type.getType("List");
			type.setTypeParam(0, expr.type);
			RESULT = new AST.ExprList(lexpr, type);
		:}
		| LEXPR:lexpr cm EXPR:expr 
		{:
			if (!lexpr.type.getTypeParam(0).isEquivalent(expr.type)) {
				report_semantic_error("Wrong Type in List Expression");
			}
			RESULT = lexpr;
			RESULT.getExprArray().add(expr);
		:}
		//| error cm EXPR
		//	{: report_syntax_error("Error in List of Expressions"); :}
;

//TEXPR ::= EXPR cm EXPR
//		| TEXPR cm EXPR
//;

///   TYPES   ///

TYPE ::= TYPE_VALUE:type_value {: RESULT = type_value; :}
	   | TYPE_FUNC:type_func {: RESULT = type_func; :}
;

// both basic types and compound
TYPE_VALUE ::= TYPE_LIST:type_list {: RESULT = type_list; :}
			 | TYPE_BASIC:type_basic {: RESULT = type_basic; :}
//			 | TYPE_TUPLE
;

TYPE_BASIC ::= type_int {: RESULT = Type.getType("Int"); :}
			 | type_double {: RESULT = Type.getType("Double"); :}
			 | type_bool {: RESULT = Type.getType("Bool"); :}
			 | type_char {: RESULT = Type.getType("Char"); :}
;

TYPE_LIST ::= bo TYPE_BASIC:type_basic bc 
		{: 
		   Type type = Type.getType("List");
		   type.setTypeParam(0, type_basic);
		   RESULT = type;
		:}
		| type_string {: RESULT = Type.getType("String"); :}
;

//TYPE_TUPLE ::= ro TTYPE_VALUE rc
//;

// no higher order functions
TYPE_FUNC ::= TYPE_VALUE:type_value arrow TYPE_FUNC:type_func
		{:
			Type type = Type.getType("Function");
			type.setTypeParam(0, type_value);
			type.setTypeParam(1, type_func);
			RESULT = type;
		:}
		    | TYPE_VALUE:type_valueL arrow TYPE_VALUE:type_valueR
		{:
			Type type = Type.getType("Function");
			type.setTypeParam(0, type_valueL);
			type.setTypeParam(1, type_valueR);
			RESULT = type;
		:}
			//| error arrow TYPE_VALUE
		//{: report_syntax_error("Error in Argument Type of Function"); :}
			//| error arrow TYPE_FUNC
		//{: report_syntax_error("Error in Argument Type of Function"); :}
;

// 0-Tuple are not allowed
//TTYPE_VALUE ::= TYPE_VALUE cm TYPE_VALUE
//			  | TTYPE_VALUE cm TYPE_VALUE
//;



