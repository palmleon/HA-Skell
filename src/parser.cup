import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Iterator;

parser code {:

	private String outputFileName;

	public boolean noCompileErrors = true;
	
	/* Next Line and Next Column Index (the parser is LALR(1)), so the last symbol scanned is the following one */
	public int nextLine, nextColumn;
	/* Current Line and Column Index (i.e. yyline() and yycolumn() in JFlex) */
	public int currLine = 0, currColumn = 0;
	
	/*
	 *  Define the name of the output file, containing the final Intermediate Representation in LLVM
	 *	@param: String outputFileName - name of the output file
	 *	@return: nothing
	 */
	public void setOutputFileName(String outputFileName) {
		this.outputFileName = outputFileName;
	}
	
	/* 
	 * 	Default Cup Function for reporting Syntax Errors
	 *  @param: java_cup.runtime.Symbol current - The last parsed symbol before raising the last Syntax Error 
	 *  @return: nothing
	 */
	public void syntax_error(java_cup.runtime.Symbol current) {
		report_error(current);
	}
	
	/*
	 * Function to retrieve values directly from the Stack
	 * @param: int position - position wrt the top of the Stack
	 * @return: Object - the corresponding element of the Stack 
	 */
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }
	
	/* 
	 *  Inform the user that a Syntax Error has been raised, and inform them about the nature of the Syntax Error
	 *	@param: Object info - The last parsed symbol before raising the last Syntax Error
	 *  		String msg - The additional message describing the kind of Syntax Error
	 *	@return: nothing
	 */
    public void report_error(Object info) {
		noCompileErrors = false;
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
	
	/*
	 * Inform the user what caused a Syntax Error
	 * @param: String msg - the error msg
	 * @return: nothing
	 */
	public void report_syntax_error(String msg) {
		noCompileErrors = false;
		System.err.println(msg);
	}
	
	public void report_semantic_error(String msg) {
		noCompileErrors = false;
		System.err.print("ERROR: Semantic error");
        System.err.println(" (line "+currLine+", column "+currColumn+"): " + msg);
        //CUP$Parser$actions.SymTableStack.dumpSymTableStack();
	}
	
:};

action code {:

	/*
	 * Boolean flag that provides additional information for debugging purposes, when raised
	 */
	public static boolean debug_mode = true; 
	
	/* 
	 * Class for the Type Tree
	 * The following Class defines the Type structure
	 * Fields: String typeName - unique name for the Type
	 * 		   Type[] - list containing all the subtypes for an instance of a compound type 
	 *				(useful for functions, lists, tuples and any additional compound type) 
	 *		   Hashmap<String, Type> typeMap - a map containg, for any typeName, the corresponding standard Type
	 *				(initialized at Parser initialization time)
	 */
	public static class Type {
		
		private String typeName;
		private Type[] childs; //better than an ArrayList because its size it's fixed
		
		/* Basic Copy Constructor */
		Type(String typeName, Type[] childs) {
			this.typeName = typeName;
			this.childs = childs; // most types should have up to 2 type params
		}
		
		/* (Recursive) Copy Constructor */
		Type(Type type) {			
			int length = type.getChilds().length;
			this.typeName = type.getTypeName();
			this.childs = new Type[length];
			for (int i = 0; i < length; i++) {
				this.childs[i] = new Type(type.getChilds()[i]);
			}
		}
		
		/* Setter method for typeName */
		public void setTypeName(String typeName) {
			this.typeName = typeName;
		}
		
		
		/* Setter method for childs */
		public void setChilds(Type[] childs){
			this.childs = childs;
		}
		
		/* Setter method for the single child */
		public void setChild(int pos, Type child) {
			this.childs[pos] = child;
		}
		
		/* Getter method for typeName */
		public String getTypeName(){
			return this.typeName;
		}
		
		/* Getter method for childs */
		public Type[] getChilds(){
			return this.childs;
		}
		
		/* Getter method for the single child */
		public Type getChild(int pos) {
			return this.childs[pos];
		}
		
		/* 
		 * Method for Type Widening
		 * This Method is asymmetric: it takes the first type and tries to upcast it into the second one
		 * @param: String typeName1, typeName2 - the types to be compared
		 * Returns: The resulting widened type (null if widening is not possible) //TODO
		 */
		public static String widen(String typeName1, String typeName2) {
			String res = null;
			if (typeName1.equals(typeName2)) res = typeName1;
			else if (typeName1.equals("Int") && typeName2.equals("Double")) res = "Double";
			return res;
		}
		
		/* Method that checks Subtyping
		 * In Haskell, Type Hierarchy is not defined; instead, Hierarchy is represented by Typeclasses
		 * and their relationship.
		 * In this version of the Language, Typeclasses are not supported, so it is defined a simple
		 * Type Hierarchy where:
		 * - Any represents Type Variables (i.e. Java Generics)
		 * - Int is a subtype of Double
		 * The widen Method checks Subtyping for the single TreeNode
		 * @param: String other - the type to be compared with the calling one
		 * Returns: Boolean - true if other is Parent of this, false otherwise
		 */
		public boolean isSubtype(String other) {
			boolean isSubtype = true;
			if (other.equals("error")) return false;
			if (other.equals("Any")) return true;
			Type type = Type.getType(other);
			if (type == null) return false;
			if (Type.widen(this.getTypeName(), type.getTypeName()) == null) return false;
			if (this.getChilds().length != type.getChilds().length) return false;
			for (int i = 0; i < this.getChilds().length; i++) {
				isSubtype = isSubtype && this.getChild(i).isSubtype(type.getChild(i).getTypeName());
			}
			return isSubtype;
		}
		
		/* 
		 * Method for Type Equivalence Checking
		 * The isSubtype relationship is a Partial Ordering Relation, 
		 * Type Equivalence is equivalent to checking that 
		 * the first type is a subtype of the second one and viceversa.
		 * @param: String other - the type to compare with the calling one
		 * Returns: Boolean - true if the Trees are equivalent, false otherwise
		 */
		 
		public boolean isEquivalent(String other) {
			Type otherTree = Type.getType(other);
			if (otherTree == null) return false;
			return this.isSubtype(other) && otherTree.isSubtype(this.getTypeName());
		}
		
		/* 
		 * Additional Method for Type Equivalence Checking
		 * @param: Type other - the tree of the type to compare with the calling one
		 * Returns: Boolean - true if the Trees are equivalent, false otherwise
		 */
		public boolean isEquivalent(Type other) {
			return this.isEquivalent(other.getTypeName());
		}
		
		/*
		 * Static TypeMap that contains all the declared Types (allows to define custom Data Types), which is initialized during Parser initialization
		 */
		private static HashMap<String, Type> typeMap = new HashMap<>();
		
		/*
		 * Create TypeMap with the predefined available Types
		 * @param: nothing
		 * @return: nothing
		 */
		private static void createTypeMap() {
			// childType is used only for making the code slightly more readable
			Type type = new Type("Int", new Type[0]);
			Type.addType(type.getTypeName(), type);
			type = new Type("Double", new Type[0]);
			Type.addType(type.getTypeName(), type);
			type = new Type("Bool", new Type[0]);
			Type.addType(type.getTypeName(), type);
			type = new Type("Char", new Type[0]);
			Type.addType(type.getTypeName(), type);
			Type[] typeArray = { new Type(type) };
			type = new Type("List", typeArray);
			Type.addType("String", type);
			Type anyType = new Type("Any", new Type[0]); 
			typeArray = new Type[]{ new Type(anyType) };
			type = new Type("List", typeArray);
			Type.addType(type.getTypeName(), type);
			typeArray = new Type[]{ new Type(anyType), new Type(anyType) };
			type = new Type("Function", typeArray);
			Type.addType(type.getTypeName(), type);
			// special error type for propagating type checking errors
			type = new Type("error", new Type[0]);
			Type.addType(type.getTypeName(), type);
			// Min Arity for Tuples = 2, Max Arity for Tuples = 10
			/*for (int i = 2; i <= 10; i++) {
				typeArray = new Type[i];
				for (int j = 0; j < i; j++) {
					typeArray[j] = new Type(anyType);
				}	
				type = new Type("Tuple" + i, typeArray); 
				Type.addType(type.getTypeName(), type);
			}*/
		}
		
		/* 
		 * Insert a new Type inside the typeMap (if already present, the new one is discarded and a Semantic Error should arise)
		 * @param: String typeName - the name of the new Type
		 * 		   Type type - the corresponding type 
		 * @return: boolean - true if no error occured, false otherwise
		 */
		public static boolean addType(String typeName, Type type) {
			if (typeMap.containsKey(typeName)) return false;
			typeMap.put(typeName, type);
			return true;
		}
		
		/* 
		 * Check whether a certain type has been defined or not
		 * @param: String typeName - the type to look for
		 * @return: boolean - true if the type exists, false otherwise
		 */
		public static boolean typeExists(String typeName) {
			return typeMap.containsKey(typeName);
		}
		
		/* 
		 * Retrieve a clone of the Type of a specific type from the typeMap, if present
		 * @param: String typeName - the name of the Type
		 * @return: the corresponding typeTree if the Type exists, null otherwise
		 */
		public static Type getType(String typeName) {
			if (typeMap.containsKey(typeName))
				return new Type(typeMap.get(typeName));
			else return null;
		}
		
		/*
		 * Debugging method for dumping the whole TypeMap TODO
		 * @param: nothing
		 * Returns: nothing
		 */
		public static void dumpTypeMap(){
			System.out.println("DEBUG: PRINTING TYPEMAP!");
			typeMap.forEach
				( (k, v) -> {
					System.out.println("TopTypeName: " + k);
					v.dumpType(0);
				} );
		}
		
		/*
		 * Debugging method for dumping a single Type TODO
		 * @param: int level - defines the level inside the Type, used for hierarchical printing of the Tree
		 * Returns: nothing
		 */
		private void dumpType(int level){
			for (int i = 0; i < level; i++)
				System.out.print("\t");
			System.out.println("-> " + this.getTypeName());
			for (int i = 0; i < this.getChilds().length; i++) {
				this.getChild(i).dumpType(level+1);
			}
		}
		
		/* 
		 * Being the project not originally developed using an IDE, using JUnit is not the best option
		 * It would be ideal to move testing there (TODO)
		 */
		public static void testType() {
			// Check Type(Type type)
			// 		 isEquivalent, isSubtype
			Type type1 = Type.getType("List");
			Type type2 = new Type(type1);
			if (type1.isEquivalent(type2.getTypeName()))
				System.out.println("TEST TYPE TREE 1: PASSED");
			else
				System.out.println("TEST TYPE TREE 1: FAILED");
			// Check isSubtype, setChild, getType
			Type type3 = Type.getType("List");
			type3.setChild(0, Type.getType("Int"));
			if (type3.isSubtype("List"))
				System.out.println("TEST TYPE TREE 2: PASSED");
			else
				System.out.println("TEST TYPE TREE 2: FAILED");
			Type type4 = Type.getType("Int");
			Type type5 = Type.getType("Double");
			if (type4.isSubtype(type5.getTypeName()) && !type5.isSubtype(type4.getTypeName()))
				System.out.println("TEST TYPE TREE 3: PASSED");
			else
				System.out.println("TEST TYPE TREE 3: FAILED");
		}
	}
	
	/* Class for the Symbol Table Stack
	 * The following Class contains a Static instance of the SymTable Stack, together with methods
	 * that allow to push/pop SymTables and to extract an Entry from them
	 * Fields: symTableStack - the Static instance of the SymTable Stack
	 */
	
	public static class SymTableStack {
		
		/* Class for Symbol Table Entry
		 * All Entries inside any SymTable are instances of this Class
		 * Fields: Type type - type of the value/function
		 *		   boolean isAssigned - flag that checks whether the value/function has been assigned or not
		 */
		private static class SymTableEntry {
			
			private Type type;
			private boolean isAssigned = false;
			
			/* TODO UNCOMMENT WHEN GENERATING IR
			// corresponding name in the intermediate representation
			String llvm;
			*/
			
			SymTableEntry(Type type) {
				this.type = type;
				this.isAssigned = false;
			}
			
			SymTableEntry(Type type, boolean isAssigned) {
				this.type = type;
				this.isAssigned = isAssigned;
			}
			
			public Type getType() {
				return this.type;
			}
			
			public boolean getIsAssigned() {
				return this.isAssigned;
			}
			
			public void setType(Type type) {
				this.type = type;
			}
			
			public void setIsAssigned(boolean isAssigned) {
				this.isAssigned = isAssigned;
			}
		}
		
		
		// Symbol Table Stack (there is only one global instance whose lifetime corresponds to the lifetime of the parser itself)
		private static LinkedList<HashMap<String, SymTableEntry>> symTableStack = new LinkedList<>();
		
		/* 
		 * Method that pushes a new SymTable to the Stack
		 * @param: nothing
		 * @return: nothing
		 */
		public static void pushSymTable() {
			symTableStack.push(new HashMap<String, SymTableEntry>());
		}
		
		/* 
		 * Method that pops the SymTable on top of the Stack
		 * @param: nothing
		 * @return: nothing
		 */
		public static void popSymTable() {
			if(debug_mode) dumpSymTableStack();
			symTableStack.pop();
		}
		
		/*
		 * 
		 */
		public static HashMap<String, SymTableEntry> peekSymTable() {
			return symTableStack.peek();
		}
		
		/*
		 * Insert a new Entry in the SymTable on top of the Stack
		 * This method is sensitive to the context (it depends on the current position in the Parser Tree)
		 * The Parser must guarantee the correct SymTable for a given Entry
		 * @param: String id - the name of the Entry (the corresponding token)
		 * 		   SymTableEntry entry - the Entry
		 * @return: nothing
		 */
		public static void putEntry(String id, SymTableEntry entry) {
			symTableStack.peek().put(id, entry);
		}
		
		/*
		 * Check whether a certain Entry is present in the whole SymTable Stack
		 * Search is applied from the top of the Stack to the bottom;
		 * the first match is considered
		 * @param: String id - the name of the Entry (the corresponding token)
		 * @return: the flag that indicates whether the Entry is present or not
		 */
		public static boolean containsEntry(String id) {
			boolean entryFound = false; // flag, raised if an Entry having the same name as id is found
			Iterator<HashMap<String, SymTableEntry>> iterator = symTableStack.listIterator(0);
			while (!entryFound && iterator.hasNext()) {
				if (iterator.next().containsKey(id)) entryFound = true;
			}
			return entryFound;
		}
		
		/*
		 * Check whether a certain Entry is present in the whole SymTable Stack and return it
		 * Search is applied from the top of the Stack to the bottom;
		 * the first match is considered
		 * @param: String id - the name of the Entry (the corresponding token)
		 * @return: the Entry itself, if found (null otherwise)
		 */
		public static SymTableEntry getEntry(String id) {
			Iterator<HashMap<String, SymTableEntry>> iterator = symTableStack.listIterator(0);
			while (iterator.hasNext()) {
				HashMap<String, SymTableEntry> currentSymTable = iterator.next();
				if (currentSymTable.containsKey(id)) return currentSymTable.get(id);
			}
			return null;
		}
		
		/*
		 * Check whether a certain Entry is present in the whole SymTable Stack and return its Type
		 * Search is applied from the top of the Stack to the bottom;
		 * the first match is considered
		 * @param: String id - the name of the Entry (the corresponding token)
		 * @return: the Type of the Entry itself, if found (null otherwise)
		 */
		/*public static Type getEntryType(String id) {
			SymTableEntry entry = SymTableStack.getEntry(id);
			if (debug_mode) System.err.println("WARNING: Inside getEntryType - no Entry found for " + id);
			return entry == null? null : entry.getType();
		}*/
		
		/*
		 * Check whether a certain Entry is present in the whole SymTable Stack and check if it has been already assigned
		 * Search is applied from the top of the Stack to the bottom;
		 * the first match is considered
		 * @param: String id - the name of the Entry (the corresponding token)
		 * @return: a Boolean flag indicating whether the variable has been assigned, null if the Entry has not been found
		 */
		/*public static Boolean getEntryAssignFlag(String id) {
			SymTableEntry entry = SymTableStack.getEntry(id);
			if (debug_mode) System.err.println("WARNING: Inside getEntryAssignFlag - no Entry found for " + id);
			return entry == null? null : entry.getIsAssigned();
		} */
		
		/*
		 * Debugging method that prints out the content of the whole symTableStack 
		 * @param: nothing
		 * Returns: nothing
		 */
		public static void dumpSymTableStack(){
			int level = symTableStack.size()-1;
			Iterator<HashMap<String, SymTableEntry>> iterator = symTableStack.listIterator(0);
			System.out.println("DEBUG: PRINTING SYMTABLESTACK!");
			while (iterator.hasNext()){
				System.out.println("Level " + level);
				iterator.next().forEach
					( (k, v) -> { 
						System.out.print("->");
						System.out.print(" Name: " + k);
						System.out.println(", isAssigned: " + v.getIsAssigned());
						v.getType().dumpType(1);
					});
				level--;
			}
		}
		
		/* 
		 * Being the project not originally developed using an IDE, using JUnit is not the best option
		 * It would be ideal to move testing there (TODO)
		 */
		public static void testSymTableStack() {
			SymTableStack.pushSymTable();
			Type type = Type.getType("Int");
			SymTableStack.putEntry("x", new SymTableEntry(type));
			SymTableStack.putEntry("y", new SymTableEntry(type));
			if (SymTableStack.containsEntry("x")) 
				System.out.println ("TEST SYMTABLE STACK 1: PASSED");
			else
				System.out.println ("TEST SYMTABLE STACK 1: FAILED");
			if (!SymTableStack.containsEntry("xx")) 
				System.out.println ("TEST SYMTABLE STACK 2: PASSED");
			else
				System.out.println ("TEST SYMTABLE STACK 2: FAILED");
			if (SymTableStack.getEntry("x") != null)
				System.out.println ("TEST SYMTABLE STACK 3: PASSED");
			else
				System.out.println ("TEST SYMTABLE STACK 3: FAILED");
			if (SymTableStack.getEntry("xx") == null) 
				System.out.println ("TEST SYMTABLE STACK 4: PASSED");
			else
				System.out.println ("TEST SYMTABLE STACK 4: FAILED");
			boolean isPresent = SymTableStack.getEntry("x").getIsAssigned();
			if (!isPresent)
				System.out.println ("TEST SYMTABLE STACK 5: PASSED");
			else
				System.out.println ("TEST SYMTABLE STACK 5: FAILED");
			SymTableStack.pushSymTable();
			Type xTree = Type.getType("Double");
			SymTableStack.putEntry("x", new SymTableEntry(xTree));
			SymTableEntry entry = SymTableStack.getEntry("x");
			if (entry != null && entry.getType().isEquivalent("Double"))
				System.out.println ("TEST SYMTABLE STACK 6: PASSED");
			else
				System.out.println ("TEST SYMTABLE STACK 6: FAILED");
 			SymTableStack.popSymTable();
		}
		
	}
	
	
	/*
	 * Method that implements Uniqueness check, i.e. verifies whether a variable has already been declared in
	 * currentSymTable or not
	 * @param: String entryName - the name of the value whose uniqueness needs to be checked
	 * @return: boolean - true if the value is unique, false otherwise
	 */
	public boolean isLocallyDeclared(String entryName) {
		return SymTableStack.peekSymTable().containsKey(entryName);
	}
	
	/*
	 * Method that implements Assignment Uniqueness check, i.e. verifies whether a variable has already been assigned
	 * @param: String entryName - the name of the value whose assignment uniqueness needs to be checked
	 * @return: boolean - true if the value has not been assigned yet, false otherwise
	 */
	public boolean isAssigned(String entryName) {
		return SymTableStack.getEntry(entryName).getIsAssigned();
	}
	
	/*
	 * Method that implements Arity check, i.e. verifies whether the function has the same arity of its actual arguments
	 * @param:  String funcName - the name of the function whose arity needs to be checked
	 * 			int arity - the expected arity of the function
	 * @return: boolean - true if the function has the same Arity, false otherwise
	 */
	public boolean hasArity(String funcName, int arity) {
		int count = 1;
		Type funcType = SymTableStack.getEntry(funcName).getType();
		Type rightChildType = funcType.getChild(1);
		while(rightChildType.isSubtype("Function")) {
			count++;
			rightChildType = rightChildType.getChild(1);
		}
		return count == arity;
	}
	
	/*
	 * Method that returns the @return Type of a Function
	 * Checking that funcName actually refers to a Funcion is up to other Semantic Rules
	 * @param: String funcName - the Function whose @return Type is required
	 * @return: Type - the Type of the @return Type
	 */
	public Type returnType(String funcName) {
		Type funcType = SymTableStack.getEntry(funcName).getType();
		return returnType(funcType);
	}
	
	/*
	 * Method that returns the @return Type of a Function
	 * Checking that the argument actually refers to a Funcion is up to other Semantic Rules
	 * @param: Type type - the Function whose @return Type is required
	 * @return: Type - the Type of the @return Type
	 */
	public Type returnType(Type type) {
		Type rightChildType = type.getChild(1);
		while(rightChildType.isSubtype("Function")) {
			rightChildType = rightChildType.getChild(1);
		}
		return rightChildType;
	}
	
	/* 
	 * Method that implements Declaration check, i.e. verifies whether a variable has been declared in the whole program,
	 * since LHC supports Static Lexical Scoping
	 * @param: String entryName - the name of the value whose declaration needs to be checked
	 * @return: boolean - true if the value has been already declared, false otherwise
	 */
	public boolean isDeclared(String entryName) {
		return SymTableStack.containsEntry(entryName);
	}
	
	/*
	 * ALL THE FOLLOWING CLASSES ARE USED FOR SEMANTIC ANALYSIS (info for the AST) and IR CODEGEN
	 */
	
	public static class ConstantAST<V> {
		public V value;
		
		ConstantAST(V value) {
			this.value = value;
		}
	}
	
	public static class ExprAST {
		public Type type;
		
		ExprAST (Type type) {
			this.type = type;
		}
	}
	
	public static class SeqExprAST {
		// Type is inferred by the ExprAST
		public ArrayList<ExprAST> exprArray;
		
		SeqExprAST (ArrayList<ExprAST> exprArray) {
			this.exprArray = exprArray;
		}
	}
	
	public static class LExprAST extends SeqExprAST {
		public Type type;
		
		LExprAST (ArrayList<ExprAST> exprArray, Type type) {
			super(exprArray);
			this.type = type;
		}
	}
	
	public static class LFormArgAST {
		Type type; // used for propagating type over the arguments
		public LinkedList<String> argList;
		
		LFormArgAST (LinkedList<String> argList, Type type) {
			this.argList = argList;
			this.type = type;
		}
	}
	
	public static class LActArgAST {
		public LinkedList<ActArgAST> actArgList;
		
		LActArgAST () {
			this.actArgList = new LinkedList<ActArgAST>();
		}
		
		LActArgAST (LinkedList<ActArgAST> actArgList) {
			this.actArgList = actArgList;
		}
	}
	
	public static class ActArgAST {
		public Type type;

		ActArgAST (Type type) {
			this.type = type;
		}
	}
	
	public static class LetBlockAST {
		public Type type;
		
		LetBlockAST (Type type) {
			this.type = type;
		}
	}
	
	public static class IfBlockAST {
		public Type type;
		
		IfBlockAST (Type type) {
			this.type = type;
		}
	}
	
	public static class DeclTypeAST {
		public Type type;
		
		DeclTypeAST (Type type) {
			this.type = type;
		}
	}
	
	/* Value is:
	 * 		- LinkedList for lists
	 *		- Tuple for tuples
	 *		- Basic type for basic types (Int, Double, Char, String, Bool)
	 */
	public static class ValueAST {
		public Type type;
		public Object value;
		
		ValueAST (Type type, Object value) {
			this.type = type;
			this.value = value;
		}
	}
	
:};

/*  In the Initialization Section, the typeMap (i.e. the list containing all declared types) is filled 
 *  with all the main Basic and Compound Types. 
 *  The only exception are Tuples, whose Type corresponds to the combination of the types of its elements;
 *  since such a Type would need too much space inside the typeMap, it is the ONLY Type that is not saved in the typeMap;
 *  so, it must be handled with specific procedures
 *  The "Any" Type acts as a wildcard and represents any possible Type (it represents Type Parameters)
 *  
 *  TODO Aggiungere metodi head, tail, size (per Liste), extract (per Tuple) nella symTable globale
 */
init with {:
		
		// Create the Table containing all Types and their Types
		CUP$Parser$actions.Type.createTypeMap();
		
		//CUP$Parser$actions.Type.dumpTypeMap();
		//CUP$Parser$actions.Type.testType();
		//CUP$Parser$actions.SymTableStack.testSymTableStack();
:}

/* Because of a bug in JavaCupMainDrawTree, the "scan with" directive does not substitute the default call to next_token as expected.
 * Instead, the user code is just inserted before the aforementioned call, preventing the user from customizing 
 * the scanning method (an "Unreachable statement" compiler error arises). 
 * For this reason, it is necessary to manually force the user code execution
 * This is the reason behind the fake conditional statement below
 */
scan with {:   
		if (true) {
			Scanner scanner = (Scanner) this.getScanner();
			Symbol s = scanner.next_token_custom();
			if (s.left != -1) {
				currLine = nextLine;		// keep track of current line and column
				currColumn = nextColumn;
				nextLine = s.left;
				nextColumn = s.right;
			}
			Tree.push(s.toString(), 0); // necessary to build the graphical Parsing Tree
			return s;
		}	
:}

/// ///////////////////////// ///
///	  TERMINALS (lowercase)   ///
/// ///////////////////////// ///

terminal main;
terminal eq, clns, cm, ro, rc, bo, bc, arrow, sep/*, us */;
terminal plus, minus, times, div, intdiv, mod, uminus, and, or, not;
//terminal head, tail, cons, conc; 
terminal elem, index;
terminal releq, relnoteq, relge, relgt, relle, rellt;
terminal indent, dedent;
//terminal where, pipe;
terminal do_begin, if_begin, then, else_begin, let, in, print;
terminal Integer val_int;
terminal Double val_double;
terminal Boolean val_bool;
terminal Character val_char;
terminal String val_string;
terminal type_int, type_double, type_bool, type_string, type_char;
terminal String id;

/// ///////////////////////// ///
///	NON TERMINALS (uppercase) ///
/// ///////////////////////// ///

non terminal PROGRAM;
non terminal FUNCT_PART, IMPER_PART;
non terminal IO_ACTIONS, IO_ACTION;
non terminal PRINT;
non terminal ExprAST COND, EXPR, VALUE_LIST;
//non terminal ExprAST EXPR_NOTUNARYOP;
non terminal LExprAST LEXPR;
non terminal ActArgAST ACTARG;
non terminal LActArgAST LACTARG;
non terminal LFormArgAST LFORMARG;
//non terminal WHERE, WHERE_STMTS, GUARDS, GUARD;
non terminal LET_STMTS;
non terminal DO_BLOCK;
non terminal LetBlockAST LET_BLOCK_FUNC;
non terminal LET_BLOCK_IMPER;
non terminal IfBlockAST IF_BLOCK_FUNC;
non terminal IF_BLOCK_IMPER;
non terminal DECL, DECL_VALUE, DECL_FUNCT;
non terminal DeclTypeAST DECL_TYPE;
non terminal Type TYPE, TYPE_VALUE, TYPE_FUNC, TYPE_LIST, TYPE_BASIC;
//non terminal LinkedList<Type> TTYPE_VALUE;
non terminal ValueAST VALUE, VALUE_BASIC;
//non terminal PATTERN, LPATTERN_CM, LPATTERN_CONS;
//non terminal PATTERN_LIST, PATTERN_TUPLE;

/// ///////////////////////// ///
///    PRECEDENCE RULES		  ///
/// ///////////////////////// ///

//precedence left conc;
//precedence right cons;
precedence left or;
precedence left and;
precedence nonassoc releq, relnoteq, relgt, relge, rellt, relle;
precedence left plus, minus;
precedence left times, div, intdiv;
precedence nonassoc index;
precedence nonassoc not, uminus;

start with PROGRAM;

/// ///////////////////////// ///
///	   PRODUCTION RULES       ///
/// ///////////////////////// ///
 
PROGRAM ::= /* empty program */ 
			{:
				if (noCompileErrors) {
				System.out.println("CODE COMPILED SUCCESSFULLY");
				}
			:}
		  | indent
			{:	// push the top-level symtable
				SymTableStack.pushSymTable();
				if (debug_mode) System.out.println("DEBUG: Top-level Symtable pushed");
			:}
			FUNCT_PART IMPER_PART 
			{:
				SymTableStack.popSymTable();
				if (debug_mode) System.out.println("DEBUG: Top-level Symtable popped");
			:}
			dedent 
			{:  // pop the top-level symtable
				if (noCompileErrors) {
					System.out.println("CODE COMPILED SUCCESSFULLY");
				}	
				else {
					System.out.println("CODE NOT COMPILED: FAILED");
				} 
			:}
;

/// ////////////////// ///
///  IMPERATIVE PART   ///
/// ////////////////// ///

IMPER_PART ::= main eq IO_ACTION
			 | main eq error
				{: report_syntax_error("Error in Main"); :}
;

IO_ACTION ::= PRINT
            | DO_BLOCK
			| IF_BLOCK_IMPER
;

IO_ACTIONS ::= IO_ACTION
			 | IO_ACTIONS sep IO_ACTION
			 | LET_BLOCK_IMPER
			 //| error sep IO_ACTION 
			//	{: report_syntax_error("Error in Imperative Part Statement"); :}
;

PRINT ::= print ACTARG:actarg
	{:
		Type argType = actarg.type;
		if (!argType.isSubtype("Double") && !argType.isSubtype("String") && !argType.isSubtype("Bool")) {
			report_semantic_error("Print does not support the Argument Type");
		}
	:}
;

DO_BLOCK ::= do_begin indent IO_ACTIONS dedent
		   | do_begin indent error dedent {: report_syntax_error("Error in Do Block"); :}
;

IF_BLOCK_IMPER ::= if_begin COND:cond then IO_ACTION else_begin IO_ACTION
				| if_begin error then IO_ACTION else_begin IO_ACTION 
					{: report_syntax_error("Error in Condition of If Statement"); :}
				| if_begin COND then error else_begin IO_ACTION 
					{: report_syntax_error("Error in Then Block of If Statement"); :}
				//| error then IO_ACTION else_begin IO_ACTION 
				//	{: report_syntax_error("Missing \"If\" in If Statement"); :}
				| if_begin COND error else_begin IO_ACTION 
					{: report_syntax_error("Missing \"Then\" in If Statement"); :}
;

LET_BLOCK_IMPER ::= let {:
						SymTableStack.pushSymTable();
						if (debug_mode) System.out.println("DEBUG: Let Statement - Symtable pushed");
					:}
					indent LET_STMTS dedent IO_ACTION {:
						SymTableStack.popSymTable();
						if (debug_mode) System.out.println("DEBUG: Let Statement - Symtable popped");
					:}
				| let error dedent IO_ACTION 
					{: report_syntax_error("Error in Let Statements of a Let Block"); :}
;
// DECL_FUNCT not supported (for now)
LET_STMTS ::= LET_STMTS sep DECL_TYPE:decl_type
			{:
				if(decl_type.type.isSubtype("Function")) {
					report_semantic_error("No Support for Local Functions");
				}
			:}
			| LET_STMTS sep DECL_VALUE
			| DECL_TYPE:decl_type
			{:
				if(decl_type.type.isSubtype("Function")) {
					report_semantic_error("No Support for Local Functions");
				}
			:}
			| DECL_VALUE
;

/// ////////////////// ///
///  FUNCTIONAL PART   ///
/// ////////////////// ///
 
FUNCT_PART ::= /* empty Functional section */
			 | FUNCT_PART DECL sep
			 | FUNCT_PART error sep 
				{: report_syntax_error("Error in Functional Statement"); :}
;

/* special expression management for boolean conditions */
COND ::= EXPR:expr {:
					if (!expr.type.isEquivalent("Bool")) {
						report_semantic_error("Wrong Type in Condition (Expected Type: Bool)");
						RESULT = new ExprAST(Type.getType("error"));
					}
					else {
						RESULT = new ExprAST(Type.getType("Bool"));
					}
			   :}
;

///  DECLARATIONS  ///

DECL ::= DECL_TYPE:decl_type
			{: // Global Lists and Functions returning Lists are not supported in this version of the compiler 
				if (decl_type.type.isSubtype("List")) {
					report_semantic_error("Global Lists not supported");
				}
			:}
	   | DECL_VALUE
	   | DECL_FUNCT;

DECL_TYPE ::= id:id cm DECL_TYPE:decl_type
			{:
				Type type = decl_type.type;
				if (!isLocallyDeclared(id) && !(type.isSubtype("Function") && returnType(type).isSubtype("List"))) {
					SymTableStack.putEntry(id, new SymTableStack.SymTableEntry(type));
				}
				else if (isLocallyDeclared(id)) {
					report_semantic_error("Multiple Value Declaration (Symbol \"" + id + "\")");
				}
				else {
					report_semantic_error("Lists as a Return Value are not supported");
				}
				RESULT = new DeclTypeAST(new Type(type));
			:}
			| id:id clns TYPE:type
			{:
				if (!isLocallyDeclared(id) && !(type.isSubtype("Function") && returnType(type).isSubtype("List"))) {
					SymTableStack.putEntry(id, new SymTableStack.SymTableEntry(type));
				}
				else if (isLocallyDeclared(id)) {
					report_semantic_error("Multiple Value Declaration (Symbol \"" + id + "\")");
				}
				else {
					report_semantic_error("Lists as a Return Value are not supported");
				}
				RESULT = new DeclTypeAST(type);
			:}
; 

/* pattern and expr should be of the same type */
//DECL_VALUE ::= PATTERN eq EXPR
DECL_VALUE ::= id:id 
			{:
				if (isDeclared(id) && isLocallyDeclared(id) && !isAssigned(id)) {
					SymTableStack.getEntry(id).setIsAssigned(true);
				}
				else {
					if (!isDeclared(id)) {
						report_semantic_error("Missing Value Declaration (Symbol \"" + id + "\")");
					}
					else if (!isLocallyDeclared(id)) {
						report_semantic_error("Value is not Locally Declared (Symbol \"" + id + "\")");
					}
					else if (isAssigned(id)) {
						report_semantic_error("Multiple Value Assignment (Symbol \"" + id + "\")");
					}
				}
			:}
			eq EXPR:expr
			{:
				if (isDeclared(id) && isLocallyDeclared(id) && isAssigned(id) && !expr.type.isEquivalent(SymTableStack.getEntry(id).getType().getTypeName())) {
						report_semantic_error("Mismatching Type on Assignment (Symbol \"" + id + "\")"); 
				}
			:}
;
/* no nullary functions */
DECL_FUNCT ::= id:id {: 
					if (isDeclared(id) && isLocallyDeclared(id) && !isAssigned(id)) {
						SymTableStack.getEntry(id).setIsAssigned(true);	
					}
					else if (!isDeclared(id)) {
						report_semantic_error("Missing Function Declaration (Symbol \"" + id + "\")");
					}
					else if (!isLocallyDeclared(id)) {
						report_semantic_error("Function is not Locally Declared (Symbol \"" + id + "\")");
					}
					else if (isAssigned(id)) {
						report_semantic_error("Multiple Function Assignment (Symbol \"" + id + "\")");
					}
					SymTableStack.pushSymTable();
					if (debug_mode) System.out.println("DEBUG: Function Declaration - Symtable pushed");
			   :}
			   LFORMARG:lformarg eq 
			   EXPR:expr {:
					Type idTree = null;
					if (isDeclared(id)){
						idTree = SymTableStack.getEntry(id).getType();
						if (idTree != null && !idTree.isSubtype("Function")) {
							report_semantic_error("Not a Function (Symbol \"" + id + "\")");
						}
						else if (!hasArity(id, lformarg.argList.size())) {
							report_semantic_error("Mismatching Arity (Symbol \"" + id + "\")");
						}
						else if (!expr.type.isEquivalent(returnType(id).getTypeName())) {
							report_semantic_error("Return Type is not equivalent to the Expression Type (Symbol \"" + id + "\")");
						}
					}
					SymTableStack.popSymTable();
					if (debug_mode) System.out.println("DEBUG: Function Declaration - Symtable popped");
			   :}  
;

/* GUARDS ::= GUARDS sep GUARD
         | GUARD
;

   GUARD ::= pipe COND eq EXPR
; */

/* WHERE ::= // no where section 
        | where indent WHERE_STMTS dedent
; 

   WHERE_STMTS ::= WHERE_STMTS sep DECL 
			  | DECL
;*/

///  PATTERN MATCHING   ///

/*LFORMARG ::= LFORMARG PATTERN
		   | PATTERN
;

PATTERN ::= PATTERN_LIST
		  | PATTERN_TUPLE
		  | VALUE_BASIC
		  | us
		  | id
;

PATTERN_LIST ::= ro PATTERN cons LPATTERN_CONS rc // value constructor pattern
			   | bo LPATTERN_CM bc	// value pattern
			   | bo bc
;

LPATTERN_CONS ::= PATTERN
				| PATTERN cons LPATTERN_CONS
;

PATTERN_TUPLE ::= ro PATTERN cm LPATTERN_CM rc
				| ro rc
;

LPATTERN_CM ::= PATTERN
			  | PATTERN cm LPATTERN_CM
; */

LFORMARG ::= LFORMARG:lformarg id:id 
			{:
				Type propTree = lformarg.type;
				if (!isLocallyDeclared(id) && propTree != null && propTree.isSubtype("Function")) {
					Type argTree = new Type(propTree.getChild(0));
					SymTableStack.putEntry(id, new SymTableStack.SymTableEntry(argTree, true));
					lformarg.argList.add(id);
					RESULT = new LFormArgAST(lformarg.argList, propTree.getChild(1));
				}
				else if (isLocallyDeclared(id)) {
					report_semantic_error("Multiple Argument Declaration (Symbol \"" + id + "\")");
					// Error Recovery
					lformarg.argList.add(id);
					RESULT = new LFormArgAST(lformarg.argList, propTree.getChild(1));
				}
				else {
					report_semantic_error("Mismatching Arity in Function"); 
					// Error Recovery
					lformarg.argList.add(id);
					RESULT = new LFormArgAST(lformarg.argList, Type.getType("error"));
				}
			:}
		   | id:id 
		   {:
				String funcName = (String) parser.stack(-2);
				if (isDeclared(funcName)) {
					Type type = SymTableStack.getEntry(funcName).getType();
					if (!isLocallyDeclared(id) && type != null && type.isSubtype("Function")) {
						Type argTree = new Type(type.getChild(0));
						SymTableStack.putEntry(id, new SymTableStack.SymTableEntry(argTree, true));
						LinkedList<String> list = new LinkedList<>();
						list.add(id);
						RESULT = new LFormArgAST(list, type.getChild(1));
					}
					else if (isLocallyDeclared(id)) {
						report_semantic_error("Multiple Argument Declaration (Symbol \"" + id + "\")");
						// Error Recovery
						LinkedList<String> list = new LinkedList<>();
						list.add(id);
						RESULT = new LFormArgAST(list, type.getChild(1));
					}
					else {
						report_semantic_error("Mismatching Arity in Function"); 
						// Error Recovery
						LinkedList<String> list = new LinkedList<>();
						list.add(id);
						RESULT = new LFormArgAST(list, Type.getType("error"));
					}
				}
				else {
					report_semantic_error("Missing Function Declaration (Symbol \"" + funcName + "\")");
					LinkedList<String> list = new LinkedList<>();
					list.add(id);
					RESULT = new LFormArgAST(list, Type.getType("error"));
				}
				
		   :}
;

///   EXPRESSIONS   ///

//EXPR ::= //EXPR:expr1 plus EXPR_NOTUNARYOP:expr2
EXPR ::= EXPR:expr1 plus EXPR:expr2
		{:
			String opType = "+";
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(new Type(expr1.type));
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 minus EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 minus EXPR:expr2
	   {:
			String opType = "-";
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(new Type(expr1.type));
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");	
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 times EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 times EXPR:expr2
	   {:
			String opType = "*";
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(new Type(expr1.type));
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 div EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 div EXPR:expr2
	   {:
			String opType = "/";
			if (expr1.type.isSubtype("Double") && expr2.type.isSubtype("Double") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Double"));
			}
			else if (!expr1.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 intdiv EXPR_NOTUNARYOP:expr2 
	   | EXPR:expr1 intdiv EXPR:expr2 
	   {:
			String opType = "div";
			if (expr1.type.isSubtype("Int") && expr2.type.isSubtype("Int") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Int"));
			}
			else if (!expr1.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   | mod ACTARG:actarg1 ACTARG:actarg2 
	   {:
			String opType = "mod";
			if (actarg1.type.isSubtype("Int") && actarg2.type.isSubtype("Int") && actarg1.type.isEquivalent(actarg2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Int"));
			}
			else if (!actarg1.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!actarg2.type.isSubtype("Int")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 and EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 and EXPR:expr2
	   {:
			String opType = "&&";
			if (expr1.type.isSubtype("Bool") && expr2.type.isSubtype("Bool") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
	   :}
	   //| EXPR:expr1 or EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 or EXPR:expr2
	    {:
			String opType = "||";
			if (expr1.type.isSubtype("Bool") && expr2.type.isSubtype("Bool") && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Bool")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
	   :}
	   | EXPR:expr1 relnoteq EXPR:expr2
	    {:
			String opType = "/=";
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 releq EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 releq EXPR:expr2
	    {:
			String opType = "==";
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 relgt EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 relgt EXPR:expr2
	   {:
			String opType = ">";
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 relge EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 relge EXPR:expr2
	   {:
			String opType = ">=";
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 rellt EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 rellt EXPR:expr2
	   {:
			String opType = "<";
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| EXPR:expr1 relle EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 relle EXPR:expr2
	   {:
			String opType = "<=";
			if ((expr1.type.isSubtype("Char") || expr1.type.isSubtype("Double")) && (expr2.type.isSubtype("Char") || expr2.type.isSubtype("Double")) && expr1.type.isEquivalent(expr2.type.getTypeName())) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else if (!expr1.type.isSubtype("Double") && !expr1.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!expr2.type.isSubtype("Double") && !expr2.type.isSubtype("Char")) {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
			else {
				report_semantic_error("Mismatching Operand Type on \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
		:}
	   //| head ACTARG
	   //| tail ACTARG
	   | elem ACTARG:actarg
	   {:
		 	String opType = "elem";
			if (actarg.type.isSubtype("List")) {
				RESULT = new ExprAST(Type.getType("Int"));
			}
			else {
				report_semantic_error("Wrong Type in \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error"));
			}
	   :}
	   //| EXPR:expr1 index EXPR_NOTUNARYOP:expr2
	   | EXPR:expr1 index EXPR:expr2
	   {:
			String opType = "!!";
			if (expr1.type.isSubtype("List") && expr2.type.isSubtype("Int")) {
				RESULT = new ExprAST(new Type(expr1.type.getChild(0)));
			}
			else if (!expr1.type.isSubtype("List")){
				report_semantic_error("Wrong Type in LHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else {
				report_semantic_error("Wrong Type in RHS of \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
	   :}
	   //| EXPR cons EXPR_NOTUNARYOP
	   //| EXPR conc EXPR_NOTUNARYOP
	   | ro EXPR:expr rc
	   {:
			RESULT = new ExprAST(new Type(expr.type));
	   :}
	   //| ro not EXPR:expr rc
	   | not EXPR:expr  
	   {:
			String opType = "not";
			if(expr.type.isSubtype("Bool")) {
				RESULT = new ExprAST(Type.getType("Bool"));
			}
			else {
				report_semantic_error("Wrong Type in \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
	   :}
	   | minus EXPR:expr
		//| ro minus EXPR:expr rc 
	   {:
			String opType = "Unary \"-\"";
			if(expr.type.isSubtype("Double")){
				RESULT = new ExprAST(new Type(expr.type));
			}
			else {
				report_semantic_error("Wrong Type in \"" + opType + "\" Expression");
				RESULT = new ExprAST(Type.getType("error")); 
			}
	   :} %prec uminus 
	   | LET_BLOCK_FUNC:let_block_func 
	   {:
			RESULT = new ExprAST(new Type(let_block_func.type));
	   :}
	   | IF_BLOCK_FUNC:if_block_func 
	   {:
			RESULT = new ExprAST(new Type(if_block_func.type));
	   :}
	   | id:id LACTARG:lactarg 
	   {:
			int nArgs = lactarg.actArgList.size();
			Type funcType = null;
			boolean failedArgsTypeChecking = false;
			if(isDeclared(id) && isAssigned(id)) {
				funcType = SymTableStack.getEntry(id).getType();
				//funcType.dumpType(0);
				if (nArgs == 0 && funcType != null && !funcType.isSubtype("Function")) { // This is not a Function Call, but a reference to a Value
					RESULT = new ExprAST(new Type(funcType));
				}
				// This is a Function Call
				else if (nArgs > 0 && funcType != null && funcType.isSubtype("Function") && hasArity(id, nArgs)) {
					for (ActArgAST actarg : lactarg.actArgList) {
						if (!actarg.type.isEquivalent(funcType.getChild(0).getTypeName()))
							failedArgsTypeChecking = true;
						funcType = funcType.getChild(1); //extract the right child of the funcType
					}
					if (!failedArgsTypeChecking) {
						RESULT = new ExprAST(new Type(funcType));
					}	
					else {
						// Error Recovery
						report_semantic_error("Wrong Type in Arguments applied to Function " + id);
						RESULT = new ExprAST(Type.getType("error")); 
					}
				}
				else {
					funcType = SymTableStack.getEntry(id).getType();
					if (nArgs == 0 && (funcType == null || funcType.isSubtype("Function"))) {
						// Error Recovery
						report_semantic_error("Not a Value (Symbol \"" + id + "\")");
						RESULT = new ExprAST(Type.getType("error"));  
					}
					else if (nArgs > 0 && (funcType == null || !funcType.isSubtype("Function"))) {
						// Error Recovery
						report_semantic_error("Not a Function (Symbol \"" + id + "\")");
						RESULT = new ExprAST(Type.getType("error")); 
					}
					else if (!hasArity(id, nArgs)) {
						// Error Recovery
						report_semantic_error("Mismatching Arity (Symbol \"" + id + "\")");
						RESULT = new ExprAST(Type.getType("error")); 
					}
				}
			}
			else if (!isDeclared(id)){
				// Error Recovery
				report_semantic_error("Missing Value Declaration (Symbol \"" + id + "\")");
				RESULT = new ExprAST(Type.getType("error")); 
			}
			else if (!isAssigned(id)) {
				// Error Recovery
				report_semantic_error("Value Declared but not Assigned (Symbol \"" + id + "\")");
				RESULT = new ExprAST(Type.getType("error")); 
			}
	   :}
	   | VALUE:value
	   {:
			RESULT = new ExprAST(new Type(value.type));
	   :}
	   | VALUE_LIST:value_list
	   {:
			Type type = Type.getType("List");
			type.setChild(0, value_list.type);
			RESULT = new ExprAST(type);
	   :}
;

LET_BLOCK_FUNC ::= 	let indent 
					{:
						SymTableStack.pushSymTable();
						if (debug_mode) System.out.println("DEBUG: Let Statement - Symtable pushed");
					:} 
					LET_STMTS dedent in EXPR:expr {:
						SymTableStack.popSymTable();
						if (debug_mode) System.out.println("DEBUG: Let Statement - Symtable popped");
						RESULT = new LetBlockAST(expr.type);
					:}
					| let error in EXPR 
						{: report_syntax_error("Error in Statement inside a Let Block"); 
							RESULT = new LetBlockAST(Type.getType("error"));
						:}
;


IF_BLOCK_FUNC ::= if_begin COND:cond then EXPR:expr1 else_begin EXPR:expr2 
				{:
					if(expr1.type.isEquivalent(expr2.type)) {
						RESULT = new IfBlockAST(expr1.type);
					}
					else {
						report_semantic_error("Multiple Return Types for If Statement");
						RESULT = new IfBlockAST(Type.getType("error")); 
					}
				:}
				| if_begin error else_begin EXPR 
					{: report_syntax_error("Error in Condition inside an If-Then-Else Block");
						RESULT = new IfBlockAST(Type.getType("error"));
					:}
				| if_begin COND then error else_begin EXPR
					{: report_syntax_error("Error in Then Block of an In-Then-Else Block"); 
						RESULT = new IfBlockAST(Type.getType("error"));
					:}
				//| error then EXPR else_begin EXPR
				//	{: report_syntax_error("Missing 'if' inside an If-Then-Else Block"); 
				//		RESULT = new IfBlockAST(Type.getType("error"));
				//	:}
				| if_begin COND error else_begin EXPR
					{: report_syntax_error("Missing 'then' inside an If-Then-Else Block"); 
						RESULT = new IfBlockAST(Type.getType("error"));
					:}
;


///    args for function call   ///

ACTARG ::= id:id 
		{:
			if (isDeclared(id) && isAssigned(id)) {
				RESULT = new ActArgAST(SymTableStack.getEntry(id).getType());
			}
			else if (!isDeclared(id)){
				report_semantic_error("Missing Value Declaration (Symbol \"" + id + "\")");
				RESULT = new ActArgAST(Type.getType("error")); 
			}
			else {
				report_semantic_error("Value Declared but Not Assigned (Symbol \"" + id + "\")");
				RESULT = new ActArgAST(SymTableStack.getEntry(id).getType());
			}
		:}
         | VALUE:value
		{:
			RESULT = new ActArgAST(value.type);			
		:}
		 | ro EXPR:expr rc
		{:
			RESULT = new ActArgAST(expr.type);			
		:}
;

// list of input arguments for function call
LACTARG ::= /* empty list of args: we call a variable */
			{:
				RESULT = new LActArgAST(new LinkedList<ActArgAST>());
			:}
		  | LACTARG:lactarg ACTARG:actarg
			{:
				lactarg.actArgList.add(actarg);
				RESULT = new LActArgAST(lactarg.actArgList);
			:}
;

///   VALUES   ///

VALUE ::= VALUE_BASIC:value_basic
		{: 
			RESULT = new ValueAST(value_basic.type, value_basic.value);
		:}
		/*| VALUE_LIST:value_list
		{:
			RESULT = new ValueAST(value_list.type, value_list.value);
		:}*/
//		| VALUE_TUPLE
;

VALUE_BASIC ::= 
		val_int:val_int
			{:
				RESULT = new ValueAST(Type.getType("Int"), val_int);
			:}
	  | val_double:val_double
			{:
				RESULT = new ValueAST(Type.getType("Double"), val_double);
			:}	  
	  | val_bool:val_bool
			{:
				RESULT = new ValueAST(Type.getType("Bool"), val_bool);
			:}
	  | val_char:val_char
			{:
				RESULT = new ValueAST(Type.getType("Char"), val_char);
			:}
	  | val_string:val_string
			{:
				RESULT = new ValueAST(Type.getType("String"), val_string);
			:}
;

// Empty List can only be directly used in declaration, to avoid Type Variables propagation
VALUE_LIST ::= bo LEXPR:lexpr bc
		{:
			RESULT = new ExprAST(lexpr.type);
		:}
;

//VALUE_TUPLE ::= ro TEXPR rc
//;

LEXPR ::= EXPR:expr
		{:
			ArrayList<ExprAST> lexpr = new ArrayList<>();
			lexpr.add(expr);
			RESULT = new LExprAST(lexpr, expr.type);
		:}
		| LEXPR:lexpr cm EXPR:expr 
		{:
			lexpr.exprArray.add(expr);
			if (lexpr.type.isEquivalent(expr.type)) {
				RESULT = new LExprAST(lexpr.exprArray, lexpr.type);
			}
			else {
				report_semantic_error("Wrong Type in List Expression");
				// Error Recovery
				RESULT = new LExprAST(lexpr.exprArray, lexpr.type);
			}
		:}
		//| error cm EXPR
		//	{: report_syntax_error("Error in List of Expressions"); :}
;

//TEXPR ::= EXPR cm EXPR
//		| TEXPR cm EXPR
//;

///   TYPES   ///

TYPE ::= TYPE_VALUE:type_value {: RESULT = type_value; :}
	   | TYPE_FUNC:type_func {: RESULT = type_func; :}
;

// both basic types and compound
TYPE_VALUE ::= TYPE_LIST:type_list {: RESULT = type_list; :}
			 | TYPE_BASIC:type_basic {: RESULT = type_basic; :}
//			 | TYPE_TUPLE
;

TYPE_BASIC ::= type_int {: RESULT = Type.getType("Int"); :}
			 | type_double {: RESULT = Type.getType("Double"); :}
			 | type_bool {: RESULT = Type.getType("Bool"); :}
			 | type_char {: RESULT = Type.getType("Char"); :}
;

TYPE_LIST ::= bo TYPE_BASIC:type_basic bc 
		{: 
		   Type type = Type.getType("List");
		   type.setChild(0, type_basic);
		   RESULT = type;
		:}
		| type_string {: RESULT = Type.getType("String"); :}
;

//TYPE_TUPLE ::= ro TTYPE_VALUE rc
//;

// no higher order functions
TYPE_FUNC ::= TYPE_VALUE:type_value arrow TYPE_FUNC:type_func
		{:
			Type type = Type.getType("Function");
			type.setChild(0, type_value);
			type.setChild(1, type_func);
			RESULT = type;
		:}
		    | TYPE_VALUE:type_valueL arrow TYPE_VALUE:type_valueR
		{:
			Type type = Type.getType("Function");
			type.setChild(0, type_valueL);
			type.setChild(1, type_valueR);
			RESULT = type;
		:}
			//| error arrow TYPE_VALUE
		//{: report_syntax_error("Error in Argument Type of Function"); :}
			//| error arrow TYPE_FUNC
		//{: report_syntax_error("Error in Argument Type of Function"); :}
;

// 0-Tuple are not allowed
//TTYPE_VALUE ::= TYPE_VALUE cm TYPE_VALUE
//			  | TTYPE_VALUE cm TYPE_VALUE
//;



