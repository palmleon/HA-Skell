import java_cup.runtime.*;
import java.util.HashMap;

parser code {:

	private String outputFileName;

	public boolean noCompileErrors = true;
	
	public void setOutputFileName(String outputFileName) {
		this.outputFileName = outputFileName;
	}
	
	public void syntax_error(java_cup.runtime.Symbol current) {
		report_error(current);
	}
	
    public void report_error(Object info) {
        System.err.print("ERROR: Syntax error");
		noCompileErrors = false;
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left);
                int column = (((Symbol)info).right);
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
	
:};

action code {:

	// Symbol Table
	public HashMap<String, Object> symTable = new HashMap<>();
	
:};

/* Because of a bug in Java Cup, the scan with method does not substitute the default call to next_token, as expected
 * Instead, the user code is just inserted before the aforementioned call, preventing the user from customizing 
 * the scanning method (an "Unreachable statement" compiler error arises). 
 * For this reason, it is necessary to manually force the user code execution and to avoid this compiler error.
 * This is the reason behind the fake conditional statement below
 */
scan with {:   if (true) {
					Scanner scanner = (Scanner) this.getScanner();
					Symbol s = scanner.next_token_custom(); 
					Tree.push(s.toString(), 0);
					return s;
				}	:}

/////////////////////////////////
///	TERMINALS (lowercase)     ///
/////////////////////////////////

terminal main;
terminal eq, clns, cm, ro, rc, bo, bc, us, arrow, sep;
terminal plus, minus, times, div, mod, exp, uminus, and, or, not;
terminal releq, relge, relgt, relle, rellt;
terminal conc, cons;
terminal indent, dedent;
//terminal where, pipe;
terminal do_begin, if_begin, then, else_begin, let, in, print;
terminal val_int, val_double, val_bool, val_char, val_string;
terminal type_int, type_double, type_bool, type_char, type_string;
terminal id;

/////////////////////////////////
///	NON TERMINALS (uppercase) ///
/////////////////////////////////

non terminal PROGRAM;
non terminal FUNCT_PART, IMPER_PART;
non terminal IO_ACTIONS, IO_ACTION;
non terminal PRINT;
non terminal COND, EXPR, EXPR_NOTUNARYOP, LEXPR;
non terminal ACTARG, LACTARG;
//non terminal WHERE, WHERE_STMTS, GUARDS, GUARD;
non terminal LET_STMTS;
non terminal DECL, DECL_TYPE, DECL_VALUE, DECL_FUNCT;
non terminal TYPE;
non terminal TYPE_VALUE, TYPE_FUNC;
non terminal TYPE_TUPLE, TYPE_LIST, TYPE_BASIC;
non terminal VALUE;
non terminal VALUE_LIST, VALUE_TUPLE, VALUE_BASIC;
non terminal LTYPE_VALUE;
non terminal PATTERN, LPATTERN;
non terminal PATTERN_LIST, PATTERN_TUPLE;
non terminal LFORMARG;

/////////////////////////////////
/// PRECEDENCE RULES		  ///
/////////////////////////////////

precedence left conc;
precedence right cons;
precedence left or;
precedence left and;
precedence nonassoc releq, relgt, relge, rellt, relle;
precedence left plus, minus;
precedence left times, div;
precedence right exp;
precedence nonassoc not, uminus;
//mod, not, uminus

start with PROGRAM;

/////////////////////////////////
///	PRODUCTION RULES          ///
/////////////////////////////////

PROGRAM ::= /* empty program */
		  | indent FUNCT_PART IMPER_PART dedent {:
											if (noCompileErrors) {
												System.out.println("CODE COMPILED SUCCESSFULLY");
											}	:}
;

IMPER_PART ::= main eq IO_ACTION {: System.out.println("Reduce: Imperative Part"); :}
;

IO_ACTION ::= PRINT {: System.out.println("Reduce: IO_ACTION"); :}
            | do_begin indent IO_ACTIONS dedent
			| let indent LET_STMTS dedent IO_ACTIONS
			| if_begin COND then IO_ACTION else_begin IO_ACTION
;

// TODO: check alignment (all io_actions are aligned to the first one)
IO_ACTIONS ::= IO_ACTION
			 | IO_ACTIONS sep IO_ACTION
;

PRINT ::= print ACTARG {: System.out.println("Reduce: PRINT"); :}
;

// TODO: check the alignment
LET_STMTS ::= LET_STMTS sep DECL 
			| DECL 
;
 
FUNCT_PART ::= /* empty Functional section */
			 | FUNCT_PART DECL sep 			 
			 | DECL sep 
;

/* special expression management for boolean conditions */
COND ::= EXPR 
;

DECL ::= DECL_TYPE
	   | DECL_VALUE
	   | DECL_FUNCT;

DECL_TYPE ::= id cm DECL_TYPE
			| id clns TYPE
; 

/* pattern and expr should be of the same type */
DECL_VALUE ::= PATTERN eq EXPR
;

/* no nullary functions */
DECL_FUNCT ::= id LFORMARG eq EXPR //WHERE
;

/* GUARDS ::= GUARDS sep GUARD
         | GUARD
;

GUARD ::= pipe COND eq EXPR
; */

/* WHERE ::= // no where section 
        | where indent WHERE_STMTS dedent
; */
		
/* WHERE_STMTS ::= WHERE_STMTS sep DECL 
			  | DECL
;*/

LFORMARG ::= LFORMARG PATTERN
		   | PATTERN
;

PATTERN ::= ro PATTERN_LIST rc
		  | ro PATTERN_TUPLE rc
		  | ro PATTERN rc
		  | us
		  | id
;

PATTERN_LIST ::= PATTERN cons PATTERN
;

PATTERN_TUPLE ::= LPATTERN
;

LPATTERN ::= PATTERN cm PATTERN
		   | LPATTERN cm PATTERN
;

EXPR ::= EXPR plus EXPR_NOTUNARYOP
	   | EXPR minus EXPR_NOTUNARYOP
	   | EXPR times EXPR_NOTUNARYOP
	   | EXPR div EXPR_NOTUNARYOP
	   | mod ACTARG ACTARG 
	   | EXPR exp EXPR_NOTUNARYOP
	   | EXPR and EXPR_NOTUNARYOP
	   | EXPR or EXPR_NOTUNARYOP
	   | EXPR releq EXPR_NOTUNARYOP
	   | EXPR relgt EXPR_NOTUNARYOP
	   | EXPR relge EXPR_NOTUNARYOP
	   | EXPR rellt EXPR_NOTUNARYOP
	   | EXPR relle EXPR_NOTUNARYOP
	   | EXPR cons EXPR_NOTUNARYOP
	   | EXPR conc EXPR_NOTUNARYOP
	   | ro EXPR rc
	   | not EXPR   
	   | minus EXPR 		%prec uminus 
	   | let indent LET_STMTS dedent in EXPR
	   | if_begin COND then EXPR else_begin EXPR
	   | id LACTARG 
	   | VALUE
;

EXPR_NOTUNARYOP ::= EXPR_NOTUNARYOP plus EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP minus EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP times EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP div EXPR_NOTUNARYOP
	   | mod ACTARG ACTARG 
	   | EXPR_NOTUNARYOP exp EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP and EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP or EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP releq EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP relgt EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP relge EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP rellt EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP relle EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP cons EXPR_NOTUNARYOP
	   | EXPR_NOTUNARYOP conc EXPR_NOTUNARYOP
	   | ro EXPR rc
	   | let indent LET_STMTS dedent in EXPR
	   | if_begin COND then EXPR else_begin EXPR
	   | id LACTARG 
	   | VALUE
;

VALUE ::= VALUE_BASIC
		| VALUE_LIST
		| VALUE_TUPLE
;

VALUE_BASIC ::= val_int
			  | val_double
			  | val_bool
			  | val_char
			  | val_string
;

VALUE_LIST ::= bo LEXPR bc
			 | bo EXPR bc
			 | bo bc
;

VALUE_TUPLE ::= ro LEXPR rc 
			  | ro rc
;

LEXPR ::= EXPR cm EXPR
		 | LEXPR cm EXPR
;

ACTARG ::= id 
         | VALUE
		 | ro EXPR rc
;

// list of input arguments for function call
LACTARG ::= /* empty list of args: we call a variable */
		  | LACTARG ACTARG
;

// both basic types and compound
TYPE ::= TYPE_VALUE
	   | TYPE_FUNC
;

TYPE_VALUE ::= TYPE_TUPLE
			 | TYPE_LIST
			 | TYPE_BASIC
;

TYPE_BASIC ::= type_int
			 | type_double
			 | type_bool
			 | type_char
			 | type_string
;

TYPE_LIST ::= bo TYPE_VALUE bc
;

TYPE_TUPLE ::= ro rc 
			 | ro LTYPE_VALUE rc
;

// no higher order functions
TYPE_FUNC ::= TYPE_VALUE arrow TYPE_FUNC
		    | TYPE_VALUE arrow TYPE_VALUE
;

LTYPE_VALUE ::= TYPE_VALUE
			  | LTYPE_VALUE cm TYPE_VALUE
;



